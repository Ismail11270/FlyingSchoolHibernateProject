[DEBUG] Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
[DEBUG] Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
[DEBUG] Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
[TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [jdbc] -> [org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl]
[TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [jta] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
[TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.JDBCTransactionFactory] -> [org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl]
[TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.JTATransactionFactory] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
[TRACE] Registering named strategy selector [org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder] : [org.hibernate.transaction.CMTTransactionFactory] -> [org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl]
[TRACE] Registering named strategy selector [org.hibernate.hql.spi.id.MultiTableBulkIdStrategy] : [persistent] -> [org.hibernate.hql.spi.id.persistent.PersistentTableBulkIdStrategy]
[TRACE] Registering named strategy selector [org.hibernate.hql.spi.id.MultiTableBulkIdStrategy] : [global_temporary] -> [org.hibernate.hql.spi.id.global.GlobalTemporaryTableBulkIdStrategy]
[TRACE] Registering named strategy selector [org.hibernate.hql.spi.id.MultiTableBulkIdStrategy] : [local_temporary] -> [org.hibernate.hql.spi.id.local.LocalTemporaryTableBulkIdStrategy]
[TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [default] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl]
[TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [jpa] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl]
[TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [legacy-jpa] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl]
[TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [legacy-hbm] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl]
[TRACE] Registering named strategy selector [org.hibernate.boot.model.naming.ImplicitNamingStrategy] : [component-path] -> [org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl]
[TRACE] Registering named strategy selector [org.hibernate.cache.spi.CacheKeysFactory] : [default] -> [org.hibernate.cache.internal.DefaultCacheKeysFactory]
[TRACE] Registering named strategy selector [org.hibernate.cache.spi.CacheKeysFactory] : [simple] -> [org.hibernate.cache.internal.SimpleCacheKeysFactory]
[TRACE] Registering named strategy selector [org.hibernate.engine.jdbc.connections.spi.ConnectionProvider] : [c3p0] -> [org.hibernate.c3p0.internal.C3P0ConnectionProvider]
[TRACE] Registering named strategy selector [org.hibernate.engine.jdbc.connections.spi.ConnectionProvider] : [C3P0ConnectionProvider] -> [org.hibernate.c3p0.internal.C3P0ConnectionProvider]
[TRACE] Registering named strategy selector [org.hibernate.engine.jdbc.connections.spi.ConnectionProvider] : [org.hibernate.connection.C3P0ConnectionProvider] -> [org.hibernate.c3p0.internal.C3P0ConnectionProvider]
[TRACE] Registering named strategy selector [org.hibernate.engine.jdbc.connections.spi.ConnectionProvider] : [org.hibernate.service.jdbc.connections.internal.C3P0ConnectionProvider] -> [org.hibernate.c3p0.internal.C3P0ConnectionProvider]
[INFO ] HHH000412: Hibernate ORM core version 5.4.18.Final
[DEBUG] HHH000206: hibernate.properties not found
[TRACE] trying via [new URL("hibernate.cfg.xml")]
[TRACE] trying via [ClassLoader.getResourceAsStream("hibernate.cfg.xml")]
[TRACE] In resolveEntity(-//Hibernate/Hibernate Configuration DTD 3.0//EN, hibernate-configuration-3.0.dtd, null, null)
[DEBUG] Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD 3.0//EN] - [hibernate-configuration-3.0.dtd]
[DEBUG] cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
[DEBUG] Building session factory using internal StandardServiceRegistryBuilder
[DEBUG] Overriding existing service binding [org.hibernate.secure.spi.JaccService]
[DEBUG] Building session factory using provided StandardServiceRegistry
[TRACE] Initializing service [role=org.hibernate.engine.config.spi.ConfigurationService]
[TRACE] Initializing service [role=org.hibernate.cache.spi.RegionFactory]
[DEBUG] Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
[DEBUG] Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
[INFO ] HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
[TRACE] Initializing service [role=org.hibernate.boot.cfgxml.spi.CfgXmlAccessService]
[TRACE] Initializing service [role=org.hibernate.id.factory.spi.MutableIdentifierGeneratorFactory]
[DEBUG] Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
[DEBUG] Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
[DEBUG] Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
[DEBUG] Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
[DEBUG] Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
[DEBUG] Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
[DEBUG] Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
[DEBUG] Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
[DEBUG] Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
[DEBUG] Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
[TRACE] Initializing service [role=org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
[TRACE] Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectFactory]
[TRACE] Initializing service [role=org.hibernate.engine.jdbc.dialect.spi.DialectResolver]
[TRACE] Initializing service [role=org.hibernate.engine.jdbc.connections.spi.ConnectionProvider]
[INFO ] HHH010002: C3P0 using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost:6033/project
[INFO ] HHH10001001: Connection properties: {user=root}
[INFO ] HHH10001003: Autocommit mode: false
[INFO ] HHH10001007: JDBC isolation level: <unknown>
[DEBUG] Database ->
       name : MySQL
    version : 5.1.34-community
      major : 5
      minor : 1
[DEBUG] Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.6 ( Revision: ${svn.Revision} )
      major : 5
      minor : 1
[DEBUG] JDBC version : 3.0
[INFO ] HHH000400: Using dialect: org.hibernate.dialect.MySQL5InnoDBDialect
[DEBUG] JDBC driver metadata reported database stores quoted identifiers in more than one case
[DEBUG] IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
[DEBUG] Unable to use Java 1.7 Connection#getSchema
[DEBUG] Unable to resolve connection default schema
org.hibernate.HibernateException: Use of DefaultSchemaNameResolver requires Dialect to provide the proper SQL statement/command but provided Dialect [org.hibernate.dialect.MySQL5InnoDBDialect] did not return anything from Dialect#getCurrentSchemaCommand
	at org.hibernate.engine.jdbc.env.internal.DefaultSchemaNameResolver$SchemaNameResolverFallbackDelegate.resolveSchemaName(DefaultSchemaNameResolver.java:100)
	at org.hibernate.engine.jdbc.env.internal.DefaultSchemaNameResolver.resolveSchemaName(DefaultSchemaNameResolver.java:76)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentImpl.determineCurrentSchemaName(JdbcEnvironmentImpl.java:311)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentImpl.<init>(JdbcEnvironmentImpl.java:266)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:114)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:101)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:176)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:118)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.build(MetadataBuildingProcess.java:83)
	at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:473)
	at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:84)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:689)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:724)
	at util.HiberUtil.getANNSessionFactory(HiberUtil.java:84)
	at util.HiberUtil.getSessionFactory(HiberUtil.java:47)
	at hiberApp.MainApp.<clinit>(MainApp.java:15)
[TRACE] Normalizing identifier quoting [project]
[TRACE] Normalizing identifier quoting [null]
[DEBUG] HHH000423: Disabling contextual LOB creation as JDBC driver reported JDBC version [3] less than 4
[TRACE] Initializing service [role=org.hibernate.engine.jdbc.spi.JdbcServices]
[DEBUG] Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
[DEBUG] Binding entity from annotated class: model.Address
[TRACE] Normalizing identifier quoting [DTYPE]
[DEBUG] Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] Import with entity name Address
[TRACE] Import: Address -> model.Address
[TRACE] Import: model.Address -> model.Address
[TRACE] Normalizing identifier quoting [ADDRESSES]
[TRACE] Normalizing identifier quoting [ADDRESSES]
[DEBUG] Bind entity model.Address on table ADDRESSES
[TRACE] Processing annotations of model.Address.id
[TRACE] Normalizing identifier quoting [ID]
[TRACE] Normalizing identifier quoting [ID]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ADDRESSES), mappingColumn=ID, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property id with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Address:id]
[DEBUG] building SimpleValue for id
[TRACE] Normalizing identifier quoting [ID]
[DEBUG] Building property id
[TRACE] Cascading id with null
[DEBUG] #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(ID)]), id, identity, , ...)
[TRACE] Bind @Id on id
[TRACE] Processing annotations of model.Address.city
[TRACE] Normalizing identifier quoting [CITY]
[TRACE] Normalizing identifier quoting [CITY]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ADDRESSES), mappingColumn=CITY, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property city with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Address:city]
[DEBUG] building SimpleValue for city
[TRACE] Normalizing identifier quoting [CITY]
[DEBUG] Building property city
[TRACE] Cascading city with null
[TRACE] Processing annotations of model.Address.country
[TRACE] Normalizing identifier quoting [COUNTRY]
[TRACE] Normalizing identifier quoting [COUNTRY]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ADDRESSES), mappingColumn=COUNTRY, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property country with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Address:country]
[DEBUG] building SimpleValue for country
[TRACE] Normalizing identifier quoting [COUNTRY]
[DEBUG] Building property country
[TRACE] Cascading country with null
[TRACE] Processing annotations of model.Address.persons
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='address'}
[TRACE] Normalizing identifier quoting [persons]
[TRACE] Normalizing identifier quoting [persons]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ADDRESSES), mappingColumn=persons, insertable=true, updatable=true, unique=false}
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ADDRESSES), mappingColumn=null, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [element]
[TRACE] Normalizing identifier quoting [element]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ADDRESSES), mappingColumn=element, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [persons_KEY]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ADDRESSES), mappingColumn=persons_KEY, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [persons_KEY]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='persons_KEY', referencedColumn='null', mappedBy='null'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='address'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='address'}
[DEBUG] Collection role: model.Address.persons
[DEBUG] Building property persons
[TRACE] Cascading persons with none
[TRACE] Processing annotations of model.Address.postalCode
[TRACE] Normalizing identifier quoting [POSTAL_CODE]
[TRACE] Normalizing identifier quoting [POSTAL_CODE]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ADDRESSES), mappingColumn=POSTAL_CODE, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property postalCode with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Address:postalCode]
[DEBUG] building SimpleValue for postalCode
[TRACE] Normalizing identifier quoting [POSTAL_CODE]
[DEBUG] Building property postalCode
[TRACE] Cascading postalCode with null
[TRACE] Processing annotations of model.Address.street
[TRACE] Normalizing identifier quoting [STREET]
[TRACE] Normalizing identifier quoting [STREET]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ADDRESSES), mappingColumn=STREET, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property street with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Address:street]
[DEBUG] building SimpleValue for street
[TRACE] Normalizing identifier quoting [STREET]
[DEBUG] Building property street
[TRACE] Cascading street with null
[DEBUG] Binding entity from annotated class: model.TheoryClass
[TRACE] Normalizing identifier quoting [DTYPE]
[DEBUG] Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] Import with entity name TheoryClass
[TRACE] Import: TheoryClass -> model.TheoryClass
[TRACE] Import: model.TheoryClass -> model.TheoryClass
[TRACE] Normalizing identifier quoting [TheoryClass]
[TRACE] Normalizing identifier quoting [TheoryClass]
[DEBUG] Bind entity model.TheoryClass on table TheoryClass
[TRACE] Processing annotations of model.TheoryClass.id
[TRACE] Normalizing identifier quoting [CLASS_ID]
[TRACE] Normalizing identifier quoting [CLASS_ID]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TheoryClass), mappingColumn=CLASS_ID, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property id with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.TheoryClass:id]
[DEBUG] building SimpleValue for id
[TRACE] Normalizing identifier quoting [CLASS_ID]
[DEBUG] Building property id
[TRACE] Cascading id with null
[DEBUG] #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(CLASS_ID)]), id, assigned, , ...)
[TRACE] Bind @Id on id
[TRACE] Processing annotations of model.TheoryClass.grade
[TRACE] Normalizing identifier quoting [GRADE]
[TRACE] Normalizing identifier quoting [GRADE]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TheoryClass), mappingColumn=GRADE, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property grade with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.TheoryClass:grade]
[DEBUG] building SimpleValue for grade
[TRACE] Normalizing identifier quoting [GRADE]
[DEBUG] Building property grade
[TRACE] Cascading grade with null
[TRACE] Processing annotations of model.TheoryClass.hours
[TRACE] Normalizing identifier quoting [HOURS]
[TRACE] Normalizing identifier quoting [HOURS]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TheoryClass), mappingColumn=HOURS, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property hours with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.TheoryClass:hours]
[DEBUG] building SimpleValue for hours
[TRACE] Normalizing identifier quoting [HOURS]
[DEBUG] Building property hours
[TRACE] Cascading hours with null
[TRACE] Processing annotations of model.TheoryClass.name
[TRACE] Normalizing identifier quoting [NAME]
[TRACE] Normalizing identifier quoting [NAME]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TheoryClass), mappingColumn=NAME, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property name with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.TheoryClass:name]
[DEBUG] building SimpleValue for name
[TRACE] Normalizing identifier quoting [NAME]
[DEBUG] Building property name
[TRACE] Cascading name with null
[TRACE] Processing annotations of model.TheoryClass.students
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TheoryClass), mappingColumn=null, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [element]
[TRACE] Normalizing identifier quoting [element]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TheoryClass), mappingColumn=element, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [students_KEY]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TheoryClass), mappingColumn=students_KEY, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [students_KEY]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='students_KEY', referencedColumn='null', mappedBy='null'}
[TRACE] Normalizing identifier quoting [CLASS_ID]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='CLASS_ID', referencedColumn='', mappedBy=''}
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='STUDENT_ID', referencedColumn='', mappedBy=''}
[DEBUG] Collection role: model.TheoryClass.students
[DEBUG] Building property students
[TRACE] Cascading students with save-update
[DEBUG] Binding entity from annotated class: model.Person
[DEBUG] Ignoring implicit (absent) DiscriminatorColumn
[DEBUG] Import with entity name Person
[TRACE] Import: Person -> model.Person
[TRACE] Import: model.Person -> model.Person
[TRACE] Normalizing identifier quoting [PERSONS]
[TRACE] Normalizing identifier quoting [PERSONS]
[DEBUG] Bind entity model.Person on table PERSONS
[TRACE] Processing annotations of model.Person.id
[TRACE] Normalizing identifier quoting [PERSON_ID]
[TRACE] Normalizing identifier quoting [PERSON_ID]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PERSONS), mappingColumn=PERSON_ID, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property id with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Person:id]
[DEBUG] building SimpleValue for id
[TRACE] Normalizing identifier quoting [PERSON_ID]
[DEBUG] Building property id
[TRACE] Cascading id with null
[DEBUG] #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(PERSON_ID)]), id, identity, , ...)
[TRACE] Bind @Id on id
[TRACE] Processing annotations of model.Person.SSN
[TRACE] Normalizing identifier quoting [SSN]
[TRACE] Normalizing identifier quoting [SSN]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PERSONS), mappingColumn=SSN, insertable=true, updatable=true, unique=true}
[DEBUG] MetadataSourceProcessor property SSN with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Person:SSN]
[DEBUG] building SimpleValue for SSN
[TRACE] Normalizing identifier quoting [SSN]
[DEBUG] Building property SSN
[TRACE] Cascading SSN with null
[TRACE] Processing annotations of model.Person.address
[TRACE] Normalizing identifier quoting [ADDRESS_ID]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='ADDRESS_ID', referencedColumn='', mappedBy=''}
[TRACE] Normalizing identifier quoting [address]
[TRACE] Normalizing identifier quoting [address]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PERSONS), mappingColumn=address, insertable=true, updatable=true, unique=false}
[DEBUG] Building property address
[TRACE] Cascading address with save-update
[TRACE] Processing annotations of model.Person.firstName
[TRACE] Normalizing identifier quoting [FIRST_NAME]
[TRACE] Normalizing identifier quoting [FIRST_NAME]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PERSONS), mappingColumn=FIRST_NAME, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property firstName with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Person:firstName]
[DEBUG] building SimpleValue for firstName
[TRACE] Normalizing identifier quoting [FIRST_NAME]
[DEBUG] Building property firstName
[TRACE] Cascading firstName with null
[TRACE] Processing annotations of model.Person.secondName
[TRACE] Normalizing identifier quoting [SECOND_NAME]
[TRACE] Normalizing identifier quoting [SECOND_NAME]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PERSONS), mappingColumn=SECOND_NAME, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property secondName with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Person:secondName]
[DEBUG] building SimpleValue for secondName
[TRACE] Normalizing identifier quoting [SECOND_NAME]
[DEBUG] Building property secondName
[TRACE] Cascading secondName with null
[DEBUG] Binding entity from annotated class: model.Student
[TRACE] Normalizing identifier quoting [PERSON_ID]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='STUDENT_ID', referencedColumn='null', mappedBy='null'}
[TRACE] Subclass joined column(s) created
[DEBUG] Import with entity name Student
[TRACE] Import: Student -> model.Student
[TRACE] Import: model.Student -> model.Student
[TRACE] Normalizing identifier quoting [STUDENTS]
[TRACE] Normalizing identifier quoting [STUDENTS]
[DEBUG] Bind entity model.Student on table STUDENTS
[TRACE] Processing annotations of model.Student.course
[TRACE] Normalizing identifier quoting [COURSE_ID]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='COURSE_ID', referencedColumn='', mappedBy=''}
[TRACE] Normalizing identifier quoting [course]
[TRACE] Normalizing identifier quoting [course]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=course, insertable=true, updatable=true, unique=false}
[DEBUG] Building property course
[TRACE] Cascading course with none
[TRACE] Processing annotations of model.Student.flights
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='student'}
[TRACE] Normalizing identifier quoting [flights]
[TRACE] Normalizing identifier quoting [flights]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=flights, insertable=true, updatable=true, unique=false}
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=null, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [element]
[TRACE] Normalizing identifier quoting [element]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=element, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [flights_KEY]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=flights_KEY, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [flights_KEY]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='flights_KEY', referencedColumn='null', mappedBy='null'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='student'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='student'}
[DEBUG] Collection role: model.Student.flights
[DEBUG] Building property flights
[TRACE] Cascading flights with none
[TRACE] Processing annotations of model.Student.instructor
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='INSTRUCTOR_ID', referencedColumn='', mappedBy=''}
[TRACE] Normalizing identifier quoting [instructor]
[TRACE] Normalizing identifier quoting [instructor]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=instructor, insertable=true, updatable=true, unique=false}
[DEBUG] Building property instructor
[TRACE] Cascading instructor with none
[TRACE] Processing annotations of model.Student.medicalTests
[TRACE] Normalizing identifier quoting [MEDICAL_TESTS]
[TRACE] Normalizing identifier quoting [MEDICAL_TESTS]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=MEDICAL_TESTS, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property medicalTests with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Student:medicalTests]
[DEBUG] building SimpleValue for medicalTests
[TRACE] Normalizing identifier quoting [MEDICAL_TESTS]
[DEBUG] Building property medicalTests
[TRACE] Cascading medicalTests with null
[TRACE] Processing annotations of model.Student.theoryClasses
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=null, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [element]
[TRACE] Normalizing identifier quoting [element]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=element, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [theoryClasses_KEY]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(STUDENTS), mappingColumn=theoryClasses_KEY, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [theoryClasses_KEY]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='theoryClasses_KEY', referencedColumn='null', mappedBy='null'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='students'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='students'}
[DEBUG] Collection role: model.Student.theoryClasses
[DEBUG] Building property theoryClasses
[TRACE] Cascading theoryClasses with none
[DEBUG] Binding entity from annotated class: model.Flight
[TRACE] Normalizing identifier quoting [DTYPE]
[DEBUG] Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] Import with entity name Flight
[TRACE] Import: Flight -> model.Flight
[TRACE] Import: model.Flight -> model.Flight
[TRACE] Normalizing identifier quoting [flights]
[TRACE] Normalizing identifier quoting [flights]
[DEBUG] Bind entity model.Flight on table flights
[TRACE] Processing annotations of model.Flight.id
[TRACE] Normalizing identifier quoting [flight_id]
[TRACE] Normalizing identifier quoting [flight_id]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(flights), mappingColumn=flight_id, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property id with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Flight:id]
[DEBUG] building SimpleValue for id
[TRACE] Normalizing identifier quoting [flight_id]
[DEBUG] Building property id
[TRACE] Cascading id with null
[DEBUG] #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(flight_id)]), id, assigned, , ...)
[TRACE] Bind @Id on id
[TRACE] Processing annotations of model.Flight.date
[TRACE] Normalizing identifier quoting [DATE]
[TRACE] Normalizing identifier quoting [DATE]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(flights), mappingColumn=DATE, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property date with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Flight:date]
[DEBUG] building SimpleValue for date
[TRACE] Normalizing identifier quoting [DATE]
[DEBUG] Building property date
[TRACE] Cascading date with null
[TRACE] Processing annotations of model.Flight.description
[TRACE] Normalizing identifier quoting [DESCRIPTION]
[TRACE] Normalizing identifier quoting [DESCRIPTION]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(flights), mappingColumn=DESCRIPTION, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property description with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Flight:description]
[DEBUG] building SimpleValue for description
[TRACE] Normalizing identifier quoting [DESCRIPTION]
[DEBUG] Building property description
[TRACE] Cascading description with null
[TRACE] Processing annotations of model.Flight.instructor
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='INSTRUCTOR_ID', referencedColumn='', mappedBy=''}
[TRACE] Normalizing identifier quoting [instructor]
[TRACE] Normalizing identifier quoting [instructor]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(flights), mappingColumn=instructor, insertable=true, updatable=true, unique=false}
[DEBUG] Building property instructor
[TRACE] Cascading instructor with none
[TRACE] Processing annotations of model.Flight.student
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='STUDENT_ID', referencedColumn='', mappedBy=''}
[TRACE] Normalizing identifier quoting [student]
[TRACE] Normalizing identifier quoting [student]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(flights), mappingColumn=student, insertable=true, updatable=true, unique=false}
[DEBUG] Building property student
[TRACE] Cascading student with none
[DEBUG] Binding entity from annotated class: model.FlightInstructor
[TRACE] Normalizing identifier quoting [PERSON_ID]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='INSTRUCTOR_ID', referencedColumn='null', mappedBy='null'}
[TRACE] Subclass joined column(s) created
[DEBUG] Import with entity name FlightInstructor
[TRACE] Import: FlightInstructor -> model.FlightInstructor
[TRACE] Import: model.FlightInstructor -> model.FlightInstructor
[TRACE] Normalizing identifier quoting [FLIGHT_INSTRUCTORS]
[TRACE] Normalizing identifier quoting [FLIGHT_INSTRUCTORS]
[DEBUG] Bind entity model.FlightInstructor on table FLIGHT_INSTRUCTORS
[TRACE] Processing annotations of model.FlightInstructor.flights
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='instructor'}
[TRACE] Normalizing identifier quoting [flights]
[TRACE] Normalizing identifier quoting [flights]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=flights, insertable=true, updatable=true, unique=false}
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=null, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [element]
[TRACE] Normalizing identifier quoting [element]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=element, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [flights_KEY]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=flights_KEY, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [flights_KEY]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='flights_KEY', referencedColumn='null', mappedBy='null'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='instructor'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='instructor'}
[DEBUG] Collection role: model.FlightInstructor.flights
[DEBUG] Building property flights
[TRACE] Cascading flights with persist,save-update
[TRACE] Processing annotations of model.FlightInstructor.licenceNo
[TRACE] Normalizing identifier quoting [LICENCE_NO]
[TRACE] Normalizing identifier quoting [LICENCE_NO]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=LICENCE_NO, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property licenceNo with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.FlightInstructor:licenceNo]
[DEBUG] building SimpleValue for licenceNo
[TRACE] Normalizing identifier quoting [LICENCE_NO]
[DEBUG] Building property licenceNo
[TRACE] Cascading licenceNo with null
[TRACE] Processing annotations of model.FlightInstructor.students
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='instructor'}
[TRACE] Normalizing identifier quoting [students]
[TRACE] Normalizing identifier quoting [students]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=students, insertable=true, updatable=true, unique=false}
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=null, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [element]
[TRACE] Normalizing identifier quoting [element]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=element, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [students_KEY]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=students_KEY, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [students_KEY]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='students_KEY', referencedColumn='null', mappedBy='null'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='instructor'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='instructor'}
[DEBUG] Collection role: model.FlightInstructor.students
[DEBUG] Building property students
[TRACE] Cascading students with persist,save-update
[TRACE] Processing annotations of model.FlightInstructor.valid
[TRACE] Normalizing identifier quoting [VALID]
[TRACE] Normalizing identifier quoting [VALID]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FLIGHT_INSTRUCTORS), mappingColumn=VALID, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property valid with lazy=false
[DEBUG] Starting applyAttributeConverter [model.FlightInstructor:valid]
[DEBUG] building SimpleValue for valid
[TRACE] Normalizing identifier quoting [VALID]
[DEBUG] Building property valid
[TRACE] Cascading valid with null
[DEBUG] Binding entity from annotated class: model.Course
[TRACE] Normalizing identifier quoting [DTYPE]
[DEBUG] Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] Import with entity name Course
[TRACE] Import: Course -> model.Course
[TRACE] Import: model.Course -> model.Course
[TRACE] Normalizing identifier quoting [COURSES]
[TRACE] Normalizing identifier quoting [COURSES]
[DEBUG] Bind entity model.Course on table COURSES
[TRACE] Processing annotations of model.Course.id
[TRACE] Normalizing identifier quoting [course_id]
[TRACE] Normalizing identifier quoting [course_id]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(COURSES), mappingColumn=course_id, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property id with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Course:id]
[DEBUG] building SimpleValue for id
[TRACE] Normalizing identifier quoting [course_id]
[DEBUG] Building property id
[TRACE] Cascading id with null
[DEBUG] #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(course_id)]), id, assigned, , ...)
[TRACE] Bind @Id on id
[TRACE] Processing annotations of model.Course.certType
[TRACE] Normalizing identifier quoting [CERT_TYPE]
[TRACE] Normalizing identifier quoting [CERT_TYPE]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(COURSES), mappingColumn=CERT_TYPE, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property certType with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Course:certType]
[DEBUG] building SimpleValue for certType
[TRACE] Normalizing identifier quoting [CERT_TYPE]
[DEBUG] Building property certType
[TRACE] Cascading certType with null
[TRACE] Processing annotations of model.Course.description
[TRACE] Normalizing identifier quoting [DESCRIPTION]
[TRACE] Normalizing identifier quoting [DESCRIPTION]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(COURSES), mappingColumn=DESCRIPTION, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property description with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Course:description]
[DEBUG] building SimpleValue for description
[TRACE] Normalizing identifier quoting [DESCRIPTION]
[DEBUG] Building property description
[TRACE] Cascading description with null
[TRACE] Processing annotations of model.Course.endDate
[TRACE] Normalizing identifier quoting [END_DATE]
[TRACE] Normalizing identifier quoting [END_DATE]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(COURSES), mappingColumn=END_DATE, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property endDate with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Course:endDate]
[DEBUG] building SimpleValue for endDate
[TRACE] Normalizing identifier quoting [END_DATE]
[DEBUG] Building property endDate
[TRACE] Cascading endDate with null
[TRACE] Processing annotations of model.Course.startDate
[TRACE] Normalizing identifier quoting [START_DATE]
[TRACE] Normalizing identifier quoting [START_DATE]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(COURSES), mappingColumn=START_DATE, insertable=true, updatable=true, unique=false}
[DEBUG] MetadataSourceProcessor property startDate with lazy=false
[DEBUG] Attempting to locate auto-apply AttributeConverter for property [model.Course:startDate]
[DEBUG] building SimpleValue for startDate
[TRACE] Normalizing identifier quoting [START_DATE]
[DEBUG] Building property startDate
[TRACE] Cascading startDate with null
[TRACE] Processing annotations of model.Course.students
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='course'}
[TRACE] Normalizing identifier quoting [students]
[TRACE] Normalizing identifier quoting [students]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(COURSES), mappingColumn=students, insertable=true, updatable=true, unique=false}
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(COURSES), mappingColumn=null, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [element]
[TRACE] Normalizing identifier quoting [element]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(COURSES), mappingColumn=element, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [students_KEY]
[DEBUG] Binding column: Ejb3Column{table=org.hibernate.mapping.Table(COURSES), mappingColumn=students_KEY, insertable=true, updatable=true, unique=false}
[TRACE] Normalizing identifier quoting [students_KEY]
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='students_KEY', referencedColumn='null', mappedBy='null'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='course'}
[DEBUG] Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='course'}
[DEBUG] Collection role: model.Course.students
[DEBUG] Building property students
[TRACE] Cascading students with all,delete,delete-orphan
[DEBUG] Starting fillSimpleValue for id
[DEBUG] Starting fillSimpleValue for city
[DEBUG] Starting fillSimpleValue for country
[DEBUG] Starting fillSimpleValue for postalCode
[DEBUG] Starting fillSimpleValue for street
[DEBUG] Starting fillSimpleValue for id
[DEBUG] Starting fillSimpleValue for grade
[DEBUG] Starting fillSimpleValue for hours
[DEBUG] Starting fillSimpleValue for name
[DEBUG] Starting fillSimpleValue for id
[DEBUG] Starting fillSimpleValue for SSN
[DEBUG] Starting fillSimpleValue for firstName
[DEBUG] Starting fillSimpleValue for secondName
[DEBUG] Starting fillSimpleValue for medicalTests
[DEBUG] Starting fillSimpleValue for id
[DEBUG] Starting fillSimpleValue for date
[DEBUG] Starting fillSimpleValue for description
[DEBUG] Starting fillSimpleValue for licenceNo
[DEBUG] Starting fillSimpleValue for valid
[DEBUG] Applying JPA AttributeConverter [org.hibernate.boot.model.convert.internal.ClassBasedConverterDescriptor@4d7aaca2] to [model.FlightInstructor:valid]
[TRACE] Initializing service [role=org.hibernate.resource.beans.spi.ManagedBeanRegistry]
[TRACE] Creating ManagedBean(goodies.BooleanConverter) using direct instantiation
[DEBUG] Starting fillSimpleValue for id
[DEBUG] Starting fillSimpleValue for certType
[DEBUG] Starting fillSimpleValue for description
[DEBUG] Starting fillSimpleValue for endDate
[DEBUG] Starting fillSimpleValue for startDate
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[TRACE] Normalizing identifier quoting [ADDRESS_ID]
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [ADDRESS_ID]
[TRACE] Normalizing identifier quoting [ADDRESS_ID]
[TRACE] Normalizing identifier quoting [COURSE_ID]
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [COURSE_ID]
[TRACE] Normalizing identifier quoting [COURSE_ID]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Forcing column [id] to be non-null as it is part of the primary key for table [addresses]
[DEBUG] Forcing column [class_id] to be non-null as it is part of the primary key for table [theoryclass]
[DEBUG] Forcing column [person_id] to be non-null as it is part of the primary key for table [persons]
[DEBUG] Forcing column [student_id] to be non-null as it is part of the primary key for table [students]
[DEBUG] Forcing column [flight_id] to be non-null as it is part of the primary key for table [flights]
[DEBUG] Forcing column [instructor_id] to be non-null as it is part of the primary key for table [flight_instructors]
[DEBUG] Forcing column [course_id] to be non-null as it is part of the primary key for table [courses]
[DEBUG] Second pass for collection: model.TheoryClass.students
[DEBUG] Binding as ManyToMany: model.TheoryClass.students
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [STUDENTS_CLASSES]
[TRACE] Normalizing identifier quoting [STUDENTS_CLASSES]
[TRACE] Normalizing identifier quoting [CLASS_ID]
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [CLASS_ID]
[TRACE] Normalizing identifier quoting [CLASS_ID]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[TRACE] Normalizing identifier quoting [null]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Forcing column [class_id] to be non-null as it is part of the primary key for table [students_classes]
[DEBUG] Forcing column [student_id] to be non-null as it is part of the primary key for table [students_classes]
[DEBUG] Mapped collection key: CLASS_ID, element: STUDENT_ID
[DEBUG] Second pass for collection: model.Address.persons
[DEBUG] Binding a OneToMany: model.Address.persons through a foreign key
[DEBUG] Mapping collection: model.Address.persons -> PERSONS
[DEBUG] Retrieving property model.Person.address
[DEBUG] Mapped collection key: ADDRESS_ID, one-to-many: model.Person
[DEBUG] Second pass for collection: model.Student.flights
[DEBUG] Binding a OneToMany: model.Student.flights through a foreign key
[DEBUG] Mapping collection: model.Student.flights -> flights
[DEBUG] Retrieving property model.Flight.student
[DEBUG] Mapped collection key: STUDENT_ID, one-to-many: model.Flight
[DEBUG] Second pass for collection: model.Student.theoryClasses
[DEBUG] Binding as ManyToMany: model.Student.theoryClasses
[DEBUG] Retrieving property model.TheoryClass.students
[DEBUG] Mapped collection key: STUDENT_ID, element: CLASS_ID
[DEBUG] Second pass for collection: model.FlightInstructor.flights
[DEBUG] Binding a OneToMany: model.FlightInstructor.flights through a foreign key
[DEBUG] Mapping collection: model.FlightInstructor.flights -> flights
[DEBUG] Retrieving property model.Flight.instructor
[DEBUG] Mapped collection key: INSTRUCTOR_ID, one-to-many: model.Flight
[DEBUG] Second pass for collection: model.FlightInstructor.students
[DEBUG] Binding a OneToMany: model.FlightInstructor.students through a foreign key
[DEBUG] Mapping collection: model.FlightInstructor.students -> STUDENTS
[DEBUG] Retrieving property model.Student.instructor
[DEBUG] Mapped collection key: INSTRUCTOR_ID, one-to-many: model.Student
[DEBUG] Second pass for collection: model.Course.students
[DEBUG] Binding a OneToMany: model.Course.students through a foreign key
[DEBUG] Mapping collection: model.Course.students -> STUDENTS
[DEBUG] Retrieving property model.Student.course
[DEBUG] Mapped collection key: COURSE_ID, one-to-many: model.Student
[DEBUG] Resolving reference to class: model.Person
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[DEBUG] Resolving reference to class: model.FlightInstructor
[DEBUG] Resolving reference to class: model.Address
[TRACE] Normalizing identifier quoting [ADDRESS_ID]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[DEBUG] Resolving reference to class: model.Student
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Resolving reference to class: model.Course
[TRACE] Normalizing identifier quoting [COURSE_ID]
[TRACE] Normalizing identifier quoting [FKjjs1m36cw9t3i0eowgthaonnc]
[DEBUG] Resolving reference to class: model.FlightInstructor
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[TRACE] Normalizing identifier quoting [FK5kg0ruyw031ulj3yfk089t4bp]
[DEBUG] Resolving reference to class: model.Person
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Resolving reference to class: model.Student
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Resolving reference to class: model.TheoryClass
[TRACE] Normalizing identifier quoting [CLASS_ID]
[DEBUG] Resolving reference to class: model.Person
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[DEBUG] Resolving reference to class: model.FlightInstructor
[DEBUG] Resolving reference to class: model.Address
[TRACE] Normalizing identifier quoting [ADDRESS_ID]
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[DEBUG] Resolving reference to class: model.Student
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Resolving reference to class: model.Course
[TRACE] Normalizing identifier quoting [COURSE_ID]
[DEBUG] Resolving reference to class: model.FlightInstructor
[TRACE] Normalizing identifier quoting [INSTRUCTOR_ID]
[DEBUG] Resolving reference to class: model.Person
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Resolving reference to class: model.Student
[TRACE] Normalizing identifier quoting [STUDENT_ID]
[DEBUG] Resolving reference to class: model.TheoryClass
[TRACE] Normalizing identifier quoting [CLASS_ID]
[TRACE] Initializing service [role=org.hibernate.boot.spi.SessionFactoryBuilderService]
[TRACE] Interpreting BatchFetchStyle from setting : null
[TRACE] Initializing service [role=org.hibernate.resource.transaction.spi.TransactionCoordinatorBuilder]
[TRACE] Initializing service [role=org.hibernate.bytecode.spi.BytecodeProvider]
[DEBUG] Building session factory
[DEBUG] SessionFactory name : null
[DEBUG] Automatic flush during beforeCompletion(): enabled
[DEBUG] Automatic session close at end of transaction: disabled
[DEBUG] Statistics: disabled
[DEBUG] Deleted entity synthetic identifier rollback: disabled
[DEBUG] Default entity-mode: pojo
[DEBUG] Check Nullability in Core (should be disabled when Bean Validation is on): enabled
[DEBUG] Allow initialization of lazy state outside session : disabled
[DEBUG] Using BatchFetchStyle : LEGACY
[DEBUG] Default batch fetch size: -1
[DEBUG] Maximum outer join fetch depth: 2
[DEBUG] Default null ordering: NONE
[DEBUG] Order SQL updates by primary key: disabled
[DEBUG] Order SQL inserts for batching: disabled
[DEBUG] multi-tenancy strategy : NONE
[DEBUG] JTA Track by Thread: enabled
[DEBUG] Query language substitutions: {}
[DEBUG] Named query checking : enabled
[DEBUG] Second-level cache: disabled
[DEBUG] Second-level query cache: disabled
[DEBUG] Second-level query cache factory: null
[DEBUG] Second-level cache region prefix: null
[DEBUG] Optimize second-level cache for minimal puts: disabled
[DEBUG] Structured second-level cache entries: disabled
[DEBUG] Second-level cache direct-reference entries: disabled
[DEBUG] Automatic eviction of collection cache: disabled
[DEBUG] JDBC batch size: 15
[DEBUG] JDBC batch updates for versioned data: enabled
[DEBUG] Scrollable result sets: enabled
[DEBUG] Wrap result sets: disabled
[DEBUG] JDBC3 getGeneratedKeys(): enabled
[DEBUG] JDBC result set fetch size: null
[DEBUG] Connection release mode: AFTER_TRANSACTION
[DEBUG] Generate SQL with comments: disabled
[DEBUG] JPA compliance - query : disabled
[DEBUG] JPA compliance - closed-handling : disabled
[DEBUG] JPA compliance - lists : disabled
[DEBUG] JPA compliance - transactions : disabled
[TRACE] Initializing service [role=org.hibernate.service.spi.SessionFactoryServiceRegistryFactory]
[TRACE] Initializing service [role=org.hibernate.event.service.spi.EventListenerRegistry]
[DEBUG] Adding preRemove as PreRemove callback for entity model.FlightInstructor
[DEBUG] Adding preRemove as PreRemove callback for entity model.Student
[TRACE] Initializing service [role=org.hibernate.cache.spi.CacheImplementor]
[DEBUG] Session factory constructed with filter configurations : {}
[DEBUG] Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, java.specification.version=11, sun.cpu.isalist=amd64, hibernate.c3p0.idle_test_period=30, sun.jnu.encoding=Cp1252, hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect, hibernate.c3p0.min_size=5, java.class.path=C:\masters\ORI\DaoExample\out\production\DaoExample;C:\masters\ORI\DaoExample\lib\istack-commons-runtime-3.0.7.jar;C:\masters\ORI\DaoExample\lib\dom4j-2.1.3.jar;C:\masters\ORI\DaoExample\lib\classmate-1.5.1.jar;C:\masters\ORI\DaoExample\lib\javax.activation-api-1.2.0.jar;C:\masters\ORI\DaoExample\lib\FastInfoset-1.2.15.jar;C:\masters\ORI\DaoExample\lib\javassist-3.24.0-GA.jar;C:\masters\ORI\DaoExample\lib\stax-ex-1.8.jar;C:\masters\ORI\DaoExample\lib\mchange-commons-java-0.2.15.jar;C:\masters\ORI\DaoExample\lib\jboss-logging-3.3.2.Final.jar;C:\masters\ORI\DaoExample\lib\antlr-2.7.7.jar;C:\masters\ORI\DaoExample\lib\hibernate-c3p0-5.4.18.Final.jar;C:\masters\ORI\DaoExample\lib\jaxb-runtime-2.3.1.jar;C:\masters\ORI\DaoExample\lib\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\masters\ORI\DaoExample\lib\hibernate-core-5.4.18.Final.jar;C:\masters\ORI\DaoExample\lib\mysql-connector-java-5.1.6.jar;C:\masters\ORI\DaoExample\lib\byte-buddy-1.10.10.jar;C:\masters\ORI\DaoExample\lib\jandex-2.1.3.Final.jar;C:\masters\ORI\DaoExample\lib\c3p0-0.9.5.3.jar;C:\masters\ORI\DaoExample\lib\hibernate-commons-annotations-5.1.0.Final.jar;C:\masters\ORI\DaoExample\lib\txw2-2.3.1.jar;C:\masters\ORI\DaoExample\lib\javax.persistence-api-2.2.jar;C:\masters\ORI\DaoExample\lib\jaxb-api-2.3.1.jar;C:\masters\ORI\DaoExample\lib\hibernate-jpamodelgen-5.4.18.Final.jar;C:\masters\ORI\DaoExample\lib\slf4j-log4j12-1.7.7.jar;C:\masters\ORI\DaoExample\lib\slf4j-api-1.7.7.jar;C:\masters\ORI\DaoExample\lib\log4j-1.2.16.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Europe/Belgrade, os.name=Windows 10, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=US, sun.boot.library.path=C:\Program Files\Java\jdk-11.0.5\bin, sun.java.command=hiberApp.MainApp, jdk.debug=release, sun.cpu.endian=little, user.home=C:\Users\Ismail, hibernate.c3p0.max_statements=10, user.language=en, java.specification.vendor=Oracle Corporation, java.version.date=2019-10-15, java.home=C:\Program Files\Java\jdk-11.0.5, file.separator=\, java.vm.compressedOopsMode=32-bit, line.separator=
, hibernate.c3p0.timeout=300, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, hibernate.hbm2ddl.auto=create, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.c3p0.max_size=20, java.runtime.version=11.0.5+10-LTS, user.name=Ismail, path.separator=;, hibernate.connection.username=****, os.version=10.0, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:6033/project, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, java.vendor.version=18.9, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vendor.url.bug=http://bugreport.java.com/bugreport/, java.io.tmpdir=C:\Users\Ismail\AppData\Local\Temp\, java.version=11.0.5, user.dir=C:\masters\ORI\DaoExample, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@5c534b5b, java.library.path=C:\Program Files\Java\jdk-11.0.5\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Java\jdk-11.0.5\bin;C:\Program Files\Microsoft MPI\Bin\;C:\Program Files\Java\jdk-11.0.5\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\Program Files\Git\cmd;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\SDK\Go\bin;C:\Program Files\nodejs\;C:\Program Files\MATLAB\R2020a\bin;C:\SDK\python2.7\;C:\tools\gnuplot\bin;C:\Program Files\TortoiseSVN\bin;C:\SDK\python\Scripts\;C:\SDK\python\;C:\Users\Ismail\AppData\Local\Microsoft\WindowsApps;;C:\Program Files\JetBrains\CLion 2019.2.5\bin;;C:\Users\Ismail\go\bin;C:\Users\Ismail\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Ismail\AppData\Roaming\npm;., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=11.0.5+10-LTS, hibernate.bytecode.use_reflection_optimizer=false, sun.io.unicode.encoding=UnicodeLittle, java.class.version=55.0}
[TRACE] Initializing service [role=org.hibernate.engine.query.spi.NativeQueryInterpreter]
[DEBUG] Skipping JACC integration as it was not enabled
[DEBUG] Instantiated session factory
[TRACE] Initializing service [role=org.hibernate.persister.spi.PersisterFactory]
[TRACE] Initializing service [role=org.hibernate.persister.spi.PersisterClassResolver]
[TRACE] Initializing service [role=org.hibernate.property.access.spi.PropertyAccessStrategyResolver]
[DEBUG] Not known whether passed class name [model.Course] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Course
[DEBUG] Not known whether passed class name [model.Course] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Course
[TRACE] Initializing service [role=org.hibernate.bytecode.spi.ProxyFactoryFactory]
[TRACE] Skipping duplicate registration of path [certType], existing type = [org.hibernate.type.CustomType@2629d5dc], incoming type = [org.hibernate.type.CustomType@2629d5dc]
[TRACE] Skipping duplicate registration of path [description], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [endDate], existing type = [org.hibernate.type.LocalDateType@51e8e6e6], incoming type = [org.hibernate.type.LocalDateType@51e8e6e6]
[TRACE] Skipping duplicate registration of path [startDate], existing type = [org.hibernate.type.LocalDateType@51e8e6e6], incoming type = [org.hibernate.type.LocalDateType@51e8e6e6]
[TRACE] Skipping duplicate registration of path [students], existing type = [org.hibernate.type.SetType(model.Course.students)], incoming type = [org.hibernate.type.SetType(model.Course.students)]
[TRACE] Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[DEBUG] Not known whether passed class name [model.Flight] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Flight
[DEBUG] Not known whether passed class name [model.Flight] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Flight
[TRACE] Skipping duplicate registration of path [instructor.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [student.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [date], existing type = [org.hibernate.type.LocalDateType@51e8e6e6], incoming type = [org.hibernate.type.LocalDateType@51e8e6e6]
[TRACE] Skipping duplicate registration of path [description], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [instructor], existing type = [org.hibernate.type.ManyToOneType(model.FlightInstructor)], incoming type = [org.hibernate.type.ManyToOneType(model.FlightInstructor)]
[TRACE] Skipping duplicate registration of path [instructor.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [instructor.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [student], existing type = [org.hibernate.type.ManyToOneType(model.Student)], incoming type = [org.hibernate.type.ManyToOneType(model.Student)]
[TRACE] Skipping duplicate registration of path [student.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [student.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[DEBUG] Not known whether passed class name [model.Person] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Person
[DEBUG] Not known whether passed class name [model.Person] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Person
[DEBUG] Not known whether passed class name [model.Student] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Student
[DEBUG] Not known whether passed class name [model.FlightInstructor] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.FlightInstructor
[DEBUG] Not known whether passed class name [model.Student] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Student
[DEBUG] Not known whether passed class name [model.FlightInstructor] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.FlightInstructor
[TRACE] Skipping duplicate registration of path [address.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [course.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [instructor.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipped adding attribute [flights] to base-type [model.Person] as more than one sub-type defined the attribute using incompatible types (strictly speaking the attributes are not inherited); existing type = [org.hibernate.type.SetType(model.Student.flights)], incoming type = [org.hibernate.type.SetType(model.FlightInstructor.flights)]
[TRACE] Skipping duplicate registration of path [SSN], existing type = [org.hibernate.type.DoubleType@45cff11c], incoming type = [org.hibernate.type.DoubleType@45cff11c]
[TRACE] Skipping duplicate registration of path [address], existing type = [org.hibernate.type.ManyToOneType(model.Address)], incoming type = [org.hibernate.type.ManyToOneType(model.Address)]
[TRACE] Skipping duplicate registration of path [address.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [address.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [firstName], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [secondName], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [course], existing type = [org.hibernate.type.ManyToOneType(model.Course)], incoming type = [org.hibernate.type.ManyToOneType(model.Course)]
[TRACE] Skipping duplicate registration of path [course.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [course.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [flights], existing type = [null], incoming type = [org.hibernate.type.SetType(model.Student.flights)]
[TRACE] Skipping duplicate registration of path [instructor], existing type = [org.hibernate.type.ManyToOneType(model.FlightInstructor)], incoming type = [org.hibernate.type.ManyToOneType(model.FlightInstructor)]
[TRACE] Skipping duplicate registration of path [instructor.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [instructor.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [medicalTests], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [theoryClasses], existing type = [org.hibernate.type.SetType(model.Student.theoryClasses)], incoming type = [org.hibernate.type.SetType(model.Student.theoryClasses)]
[TRACE] Skipping duplicate registration of path [flights], existing type = [null], incoming type = [org.hibernate.type.SetType(model.FlightInstructor.flights)]
[TRACE] Skipping duplicate registration of path [licenceNo], existing type = [org.hibernate.type.LongType@47605f2f], incoming type = [org.hibernate.type.LongType@47605f2f]
[TRACE] Skipping duplicate registration of path [students], existing type = [org.hibernate.type.SetType(model.FlightInstructor.students)], incoming type = [org.hibernate.type.SetType(model.FlightInstructor.students)]
[TRACE] Skipping duplicate registration of path [valid], existing type = [BasicType adapter for AttributeConverter<Boolean,Character>], incoming type = [BasicType adapter for AttributeConverter<Boolean,Character>]
[TRACE] Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[DEBUG] Not known whether passed class name [model.Address] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Address
[DEBUG] Not known whether passed class name [model.Address] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.Address
[TRACE] Skipping duplicate registration of path [city], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [country], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [persons], existing type = [org.hibernate.type.SetType(model.Address.persons)], incoming type = [org.hibernate.type.SetType(model.Address.persons)]
[TRACE] Skipping duplicate registration of path [postalCode], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [street], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [address.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [SSN], existing type = [org.hibernate.type.DoubleType@45cff11c], incoming type = [org.hibernate.type.DoubleType@45cff11c]
[TRACE] Skipping duplicate registration of path [address], existing type = [org.hibernate.type.ManyToOneType(model.Address)], incoming type = [org.hibernate.type.ManyToOneType(model.Address)]
[TRACE] Skipping duplicate registration of path [address.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [address.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [firstName], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [secondName], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [flights], existing type = [org.hibernate.type.SetType(model.FlightInstructor.flights)], incoming type = [org.hibernate.type.SetType(model.FlightInstructor.flights)]
[TRACE] Skipping duplicate registration of path [licenceNo], existing type = [org.hibernate.type.LongType@47605f2f], incoming type = [org.hibernate.type.LongType@47605f2f]
[TRACE] Skipping duplicate registration of path [students], existing type = [org.hibernate.type.SetType(model.FlightInstructor.students)], incoming type = [org.hibernate.type.SetType(model.FlightInstructor.students)]
[TRACE] Skipping duplicate registration of path [valid], existing type = [BasicType adapter for AttributeConverter<Boolean,Character>], incoming type = [BasicType adapter for AttributeConverter<Boolean,Character>]
[TRACE] Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [address.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [course.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [instructor.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [SSN], existing type = [org.hibernate.type.DoubleType@45cff11c], incoming type = [org.hibernate.type.DoubleType@45cff11c]
[TRACE] Skipping duplicate registration of path [address], existing type = [org.hibernate.type.ManyToOneType(model.Address)], incoming type = [org.hibernate.type.ManyToOneType(model.Address)]
[TRACE] Skipping duplicate registration of path [address.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [address.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [firstName], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [secondName], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [course], existing type = [org.hibernate.type.ManyToOneType(model.Course)], incoming type = [org.hibernate.type.ManyToOneType(model.Course)]
[TRACE] Skipping duplicate registration of path [course.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [course.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [flights], existing type = [org.hibernate.type.SetType(model.Student.flights)], incoming type = [org.hibernate.type.SetType(model.Student.flights)]
[TRACE] Skipping duplicate registration of path [instructor], existing type = [org.hibernate.type.ManyToOneType(model.FlightInstructor)], incoming type = [org.hibernate.type.ManyToOneType(model.FlightInstructor)]
[TRACE] Skipping duplicate registration of path [instructor.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [instructor.id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [medicalTests], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [theoryClasses], existing type = [org.hibernate.type.SetType(model.Student.theoryClasses)], incoming type = [org.hibernate.type.SetType(model.Student.theoryClasses)]
[TRACE] Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[DEBUG] Not known whether passed class name [model.TheoryClass] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TheoryClass
[DEBUG] Not known whether passed class name [model.TheoryClass] is safe
[DEBUG] No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.TheoryClass
[TRACE] Skipping duplicate registration of path [grade], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [hours], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[TRACE] Skipping duplicate registration of path [name], existing type = [org.hibernate.type.StringType@1e1d3956], incoming type = [org.hibernate.type.StringType@1e1d3956]
[TRACE] Skipping duplicate registration of path [students], existing type = [org.hibernate.type.SetType(model.TheoryClass.students)], incoming type = [org.hibernate.type.SetType(model.TheoryClass.students)]
[TRACE] Skipping duplicate registration of path [id], existing type = [org.hibernate.type.IntegerType@3f053c80], incoming type = [org.hibernate.type.IntegerType@3f053c80]
[DEBUG] Static SQL for collection: model.TheoryClass.students
[DEBUG]  Row insert: insert into STUDENTS_CLASSES (CLASS_ID, STUDENT_ID) values (?, ?)
[DEBUG]  Row update: update STUDENTS_CLASSES set STUDENT_ID=? where CLASS_ID=? and STUDENT_ID=?
[DEBUG]  Row delete: delete from STUDENTS_CLASSES where CLASS_ID=? and STUDENT_ID=?
[DEBUG]  One-shot delete: delete from STUDENTS_CLASSES where CLASS_ID=?
[DEBUG] Static SQL for collection: model.FlightInstructor.flights
[DEBUG]  Row insert: update flights set INSTRUCTOR_ID=? where flight_id=?
[DEBUG]  Row update: update flights set  where flight_id=?
[DEBUG]  Row delete: update flights set INSTRUCTOR_ID=null where INSTRUCTOR_ID=? and flight_id=?
[DEBUG]  One-shot delete: update flights set INSTRUCTOR_ID=null where INSTRUCTOR_ID=?
[DEBUG] Static SQL for collection: model.Student.theoryClasses
[DEBUG]  Row insert: insert into STUDENTS_CLASSES (STUDENT_ID, CLASS_ID) values (?, ?)
[DEBUG]  Row update: update STUDENTS_CLASSES set CLASS_ID=? where STUDENT_ID=? and CLASS_ID=?
[DEBUG]  Row delete: delete from STUDENTS_CLASSES where STUDENT_ID=? and CLASS_ID=?
[DEBUG]  One-shot delete: delete from STUDENTS_CLASSES where STUDENT_ID=?
[DEBUG] Static SQL for collection: model.Course.students
[DEBUG]  Row insert: update STUDENTS set COURSE_ID=? where STUDENT_ID=?
[DEBUG]  Row update: update STUDENTS set  where STUDENT_ID=?
[DEBUG]  Row delete: update STUDENTS set COURSE_ID=null where COURSE_ID=? and STUDENT_ID=?
[DEBUG]  One-shot delete: update STUDENTS set COURSE_ID=null where COURSE_ID=?
[DEBUG] Static SQL for collection: model.Address.persons
[DEBUG]  Row insert: update PERSONS set ADDRESS_ID=? where PERSON_ID=?
[DEBUG]  Row update: update PERSONS set  where PERSON_ID=?
[DEBUG]  Row delete: update PERSONS set ADDRESS_ID=null where ADDRESS_ID=? and PERSON_ID=?
[DEBUG]  One-shot delete: update PERSONS set ADDRESS_ID=null where ADDRESS_ID=?
[DEBUG] Static SQL for collection: model.Student.flights
[DEBUG]  Row insert: update flights set STUDENT_ID=? where flight_id=?
[DEBUG]  Row update: update flights set  where flight_id=?
[DEBUG]  Row delete: update flights set STUDENT_ID=null where STUDENT_ID=? and flight_id=?
[DEBUG]  One-shot delete: update flights set STUDENT_ID=null where STUDENT_ID=?
[DEBUG] Static SQL for collection: model.FlightInstructor.students
[DEBUG]  Row insert: update STUDENTS set INSTRUCTOR_ID=? where STUDENT_ID=?
[DEBUG]  Row update: update STUDENTS set  where STUDENT_ID=?
[DEBUG]  Row delete: update STUDENTS set INSTRUCTOR_ID=null where INSTRUCTOR_ID=? and STUDENT_ID=?
[DEBUG]  One-shot delete: update STUDENTS set INSTRUCTOR_ID=null where INSTRUCTOR_ID=?
[TRACE] Ignoring subclass attribute definition [model.Person.SSN] because it is defined in a superclass 
[TRACE] Ignoring subclass attribute definition [model.Person.address] because it is defined in a superclass 
[TRACE] Ignoring subclass attribute definition [model.Person.firstName] because it is defined in a superclass 
[TRACE] Ignoring subclass attribute definition [model.Person.secondName] because it is defined in a superclass 
[TRACE] Ignoring subclass attribute definition [model.Person.SSN] because it is defined in a superclass 
[TRACE] Ignoring subclass attribute definition [model.Person.address] because it is defined in a superclass 
[TRACE] Ignoring subclass attribute definition [model.Person.firstName] because it is defined in a superclass 
[TRACE] Ignoring subclass attribute definition [model.Person.secondName] because it is defined in a superclass 
[TRACE] Ignoring subclass attribute definition [model.Person.flights] because it is defined in a superclass 
[DEBUG] Static SQL for entity: model.Course
[DEBUG]  Version select: select course_id from COURSES where course_id =?
[DEBUG]  Snapshot select: select course_.course_id, course_.CERT_TYPE as cert_typ2_1_, course_.DESCRIPTION as descript3_1_, course_.END_DATE as end_date4_1_, course_.START_DATE as start_da5_1_ from COURSES course_ where course_.course_id=?
[DEBUG]  Insert 0: insert into COURSES (CERT_TYPE, DESCRIPTION, END_DATE, START_DATE, course_id) values (?, ?, ?, ?, ?)
[DEBUG]  Update 0: update COURSES set CERT_TYPE=?, DESCRIPTION=?, END_DATE=?, START_DATE=? where course_id=?
[DEBUG]  Delete 0: delete from COURSES where course_id=?
[TRACE]  Starting root entity : model.Course
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4bdf]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5f05c8d6
[TRACE] .. Registering AssociationKey : AssociationKey(table=COURSES, columns={course_id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5f05c8d6
[TRACE] >> Starting entity identifier : model.Course
[DEBUG] Visiting attribute path : certType
[TRACE] >> Starting attribute Attribute(name=certType, type=org.hibernate.type.EnumType [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=certType, type=org.hibernate.type.EnumType [non-identifier])
[DEBUG] Visiting attribute path : description
[TRACE] >> Starting attribute Attribute(name=description, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=description, type=string [non-identifier])
[DEBUG] Visiting attribute path : endDate
[TRACE] >> Starting attribute Attribute(name=endDate, type=LocalDate [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=endDate, type=LocalDate [non-identifier])
[DEBUG] Visiting attribute path : startDate
[TRACE] >> Starting attribute Attribute(name=startDate, type=LocalDate [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=startDate, type=LocalDate [non-identifier])
[DEBUG] Visiting attribute path : students
[TRACE] >> Starting attribute Attribute(name=students, type=java.util.Set(model.Course.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@550e9be6]
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@60e06f7d]
[TRACE] << Finishing up attribute : Attribute(name=students, type=java.util.Set(model.Course.students) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@5f05c8d6
[TRACE]  Finished root entity : model.Course
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Course)
    - Returns
       - EntityReturnImpl(entity=model.Course, querySpaceUid=<gen:0>, path=model.Course)
          - CollectionAttributeFetchImpl(collection=model.Course.students, querySpaceUid=<gen:1>, path=model.Course.students)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:2>, path=model.Course.students.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Course)
          - SQL table alias mapping - course0_
          - alias suffix - 0_
          - suffixed key columns - {course_i1_1_0_}

[DEBUG] Static select for entity model.Course [NONE]: select course0_.course_id as course_i1_1_0_, course0_.CERT_TYPE as cert_typ2_1_0_, course0_.DESCRIPTION as descript3_1_0_, course0_.END_DATE as end_date4_1_0_, course0_.START_DATE as start_da5_1_0_ from COURSES course0_ where course0_.course_id=?
[TRACE]  Starting root entity : model.Course
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@45545e7a]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@9f674ac
[TRACE] .. Registering AssociationKey : AssociationKey(table=COURSES, columns={course_id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@9f674ac
[TRACE] >> Starting entity identifier : model.Course
[DEBUG] Visiting attribute path : certType
[TRACE] >> Starting attribute Attribute(name=certType, type=org.hibernate.type.EnumType [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=certType, type=org.hibernate.type.EnumType [non-identifier])
[DEBUG] Visiting attribute path : description
[TRACE] >> Starting attribute Attribute(name=description, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=description, type=string [non-identifier])
[DEBUG] Visiting attribute path : endDate
[TRACE] >> Starting attribute Attribute(name=endDate, type=LocalDate [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=endDate, type=LocalDate [non-identifier])
[DEBUG] Visiting attribute path : startDate
[TRACE] >> Starting attribute Attribute(name=startDate, type=LocalDate [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=startDate, type=LocalDate [non-identifier])
[DEBUG] Visiting attribute path : students
[TRACE] >> Starting attribute Attribute(name=students, type=java.util.Set(model.Course.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1da4b3f9]
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@23cbbd07]
[TRACE] << Finishing up attribute : Attribute(name=students, type=java.util.Set(model.Course.students) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@9f674ac
[TRACE]  Finished root entity : model.Course
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Course)
    - Returns
       - EntityReturnImpl(entity=model.Course, querySpaceUid=<gen:0>, path=model.Course)
          - CollectionAttributeFetchImpl(collection=model.Course.students, querySpaceUid=<gen:1>, path=model.Course.students)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:2>, path=model.Course.students.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Course)
          - SQL table alias mapping - course0_
          - alias suffix - 0_
          - suffixed key columns - {course_i1_1_0_}

[DEBUG] Static select for entity model.Course [READ]: select course0_.course_id as course_i1_1_0_, course0_.CERT_TYPE as cert_typ2_1_0_, course0_.DESCRIPTION as descript3_1_0_, course0_.END_DATE as end_date4_1_0_, course0_.START_DATE as start_da5_1_0_ from COURSES course0_ where course0_.course_id=?
[DEBUG] Static select for action ACTION_MERGE on entity model.Course: select course0_.course_id as course_i1_1_1_, course0_.CERT_TYPE as cert_typ2_1_1_, course0_.DESCRIPTION as descript3_1_1_, course0_.END_DATE as end_date4_1_1_, course0_.START_DATE as start_da5_1_1_, students1_.COURSE_ID as course_i3_5_3_, students1_.STUDENT_ID as student_2_5_3_, students1_.STUDENT_ID as person_i1_4_0_, students1_1_.SSN as ssn2_4_0_, students1_1_.ADDRESS_ID as address_5_4_0_, students1_1_.FIRST_NAME as first_na3_4_0_, students1_1_.SECOND_NAME as second_n4_4_0_, students1_.COURSE_ID as course_i3_5_0_, students1_.INSTRUCTOR_ID as instruct4_5_0_, students1_.MEDICAL_TESTS as medical_1_5_0_ from COURSES course0_ left outer join STUDENTS students1_ on course0_.course_id=students1_.COURSE_ID left outer join PERSONS students1_1_ on students1_.STUDENT_ID=students1_1_.PERSON_ID where course0_.course_id=?
[DEBUG] Static select for action ACTION_REFRESH on entity model.Course: select course0_.course_id as course_i1_1_1_, course0_.CERT_TYPE as cert_typ2_1_1_, course0_.DESCRIPTION as descript3_1_1_, course0_.END_DATE as end_date4_1_1_, course0_.START_DATE as start_da5_1_1_, students1_.COURSE_ID as course_i3_5_3_, students1_.STUDENT_ID as student_2_5_3_, students1_.STUDENT_ID as person_i1_4_0_, students1_1_.SSN as ssn2_4_0_, students1_1_.ADDRESS_ID as address_5_4_0_, students1_1_.FIRST_NAME as first_na3_4_0_, students1_1_.SECOND_NAME as second_n4_4_0_, students1_.COURSE_ID as course_i3_5_0_, students1_.INSTRUCTOR_ID as instruct4_5_0_, students1_.MEDICAL_TESTS as medical_1_5_0_ from COURSES course0_ left outer join STUDENTS students1_ on course0_.course_id=students1_.COURSE_ID left outer join PERSONS students1_1_ on students1_.STUDENT_ID=students1_1_.PERSON_ID where course0_.course_id=?
[DEBUG] Static SQL for entity: model.Flight
[DEBUG]  Version select: select flight_id from flights where flight_id =?
[DEBUG]  Snapshot select: select flight_.flight_id, flight_.DATE as date2_3_, flight_.DESCRIPTION as descript3_3_, flight_.INSTRUCTOR_ID as instruct4_3_, flight_.STUDENT_ID as student_5_3_ from flights flight_ where flight_.flight_id=?
[DEBUG]  Insert 0: insert into flights (DATE, DESCRIPTION, INSTRUCTOR_ID, STUDENT_ID, flight_id) values (?, ?, ?, ?, ?)
[DEBUG]  Update 0: update flights set DATE=?, DESCRIPTION=?, INSTRUCTOR_ID=?, STUDENT_ID=? where flight_id=?
[DEBUG]  Delete 0: delete from flights where flight_id=?
[TRACE]  Starting root entity : model.Flight
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4116f66a]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@59c04bee
[TRACE] .. Registering AssociationKey : AssociationKey(table=flights, columns={flight_id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@59c04bee
[TRACE] >> Starting entity identifier : model.Flight
[DEBUG] Visiting attribute path : date
[TRACE] >> Starting attribute Attribute(name=date, type=LocalDate [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=date, type=LocalDate [non-identifier])
[DEBUG] Visiting attribute path : description
[TRACE] >> Starting attribute Attribute(name=description, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=description, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@45900b64]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@416d56f2
[TRACE] .... Registering AssociationKey : AssociationKey(table=flights, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@416d56f2
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[TRACE] >>>> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6e31d989]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@1b01a0d
[TRACE] ...... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@1b01a0d
[TRACE] >>>>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : instructor.address.city
[TRACE] >>>>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.address.country
[TRACE] >>>>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.address.persons
[DEBUG] Property path deemed to be circular : instructor.address.persons
[DEBUG] Visiting attribute path : instructor.address.postalCode
[TRACE] >>>>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.address.street
[TRACE] >>>>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@1b01a0d
[TRACE] <<<< Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[DEBUG] Property path deemed to be circular : instructor.flights
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[TRACE] >>>> Starting attribute Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2ed71727]
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5261ec9]
[TRACE] <<<< Finishing up attribute : Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@416d56f2
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : student
[TRACE] >> Starting attribute Attribute(name=student, type=model.Student [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@65bb6275]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@64da6cbd
[TRACE] .... Registering AssociationKey : AssociationKey(table=flights, columns={STUDENT_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@64da6cbd
[TRACE] >>>> Starting entity identifier : model.Student
[DEBUG] Visiting attribute path : student.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : student.address
[DEBUG] Property path deemed to be circular : student.address
[DEBUG] Visiting attribute path : student.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.course
[TRACE] >>>> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d119405]
[TRACE] <<<< Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : student.flights
[DEBUG] Property path deemed to be circular : student.flights
[DEBUG] Visiting attribute path : student.instructor
[TRACE] >>>> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@57e388c3]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@20580d4e
[TRACE] ...... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@20580d4e
[TRACE] >>>>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : student.instructor.SSN
[TRACE] >>>>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.address
[DEBUG] Property path deemed to be circular : student.instructor.address
[DEBUG] Visiting attribute path : student.instructor.firstName
[TRACE] >>>>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.secondName
[TRACE] >>>>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.flights
[DEBUG] Property path deemed to be circular : student.instructor.flights
[DEBUG] Visiting attribute path : student.instructor.licenceNo
[TRACE] >>>>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.students
[DEBUG] Property path deemed to be circular : student.instructor.students
[DEBUG] Visiting attribute path : student.instructor.valid
[TRACE] >>>>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@20580d4e
[TRACE] <<<< Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : student.medicalTests
[TRACE] >>>> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.theoryClasses
[TRACE] >>>> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@21bd128b]
[DEBUG] Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2d0b05]
[TRACE] <<<< Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@64da6cbd
[TRACE] << Finishing up attribute : Attribute(name=student, type=model.Student [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@59c04bee
[TRACE]  Finished root entity : model.Flight
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Flight)
    - Returns
       - EntityReturnImpl(entity=model.Flight, querySpaceUid=<gen:0>, path=model.Flight)
          - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:1>, path=model.Flight.instructor)
             - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:2>, path=model.Flight.instructor.address)
             - CollectionAttributeFetchImpl(collection=model.FlightInstructor.students, querySpaceUid=<gen:3>, path=model.Flight.instructor.students)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:4>, path=model.Flight.instructor.students.<elements>)
          - EntityAttributeFetchImpl(entity=model.Student, querySpaceUid=<gen:5>, path=model.Flight.student)
             - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:6>, path=model.Flight.student.course)
             - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:7>, path=model.Flight.student.instructor)
             - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:8>, path=model.Flight.student.theoryClasses)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:9>, path=model.Flight.student.theoryClasses.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Flight)
          - SQL table alias mapping - flight0_
          - alias suffix - 0_
          - suffixed key columns - {flight_i1_3_0_}
          - JOIN (JoinDefinedByMetadata(instructor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.FlightInstructor)
                - SQL table alias mapping - flightinst1_
                - alias suffix - 1_
                - suffixed key columns - {person_i1_4_1_}
                - JOIN (JoinDefinedByMetadata(address)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.Address)
                      - SQL table alias mapping - address2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}
          - JOIN (JoinDefinedByMetadata(student)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=model.Student)
                - SQL table alias mapping - student3_
                - alias suffix - 3_
                - suffixed key columns - {person_i1_4_3_}
                - JOIN (JoinDefinedByMetadata(instructor)) : <gen:5> -> <gen:7>
                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=model.FlightInstructor)
                      - SQL table alias mapping - flightinst4_
                      - alias suffix - 4_
                      - suffixed key columns - {person_i1_4_4_}

[DEBUG] Static select for entity model.Flight [NONE]: select flight0_.flight_id as flight_i1_3_0_, flight0_.DATE as date2_3_0_, flight0_.DESCRIPTION as descript3_3_0_, flight0_.INSTRUCTOR_ID as instruct4_3_0_, flight0_.STUDENT_ID as student_5_3_0_, flightinst1_.INSTRUCTOR_ID as person_i1_4_1_, flightinst1_1_.SSN as ssn2_4_1_, flightinst1_1_.ADDRESS_ID as address_5_4_1_, flightinst1_1_.FIRST_NAME as first_na3_4_1_, flightinst1_1_.SECOND_NAME as second_n4_4_1_, flightinst1_.LICENCE_NO as licence_1_2_1_, flightinst1_.VALID as valid2_2_1_, address2_.ID as id1_0_2_, address2_.CITY as city2_0_2_, address2_.COUNTRY as country3_0_2_, address2_.POSTAL_CODE as postal_c4_0_2_, address2_.STREET as street5_0_2_, student3_.STUDENT_ID as person_i1_4_3_, student3_1_.SSN as ssn2_4_3_, student3_1_.ADDRESS_ID as address_5_4_3_, student3_1_.FIRST_NAME as first_na3_4_3_, student3_1_.SECOND_NAME as second_n4_4_3_, student3_.COURSE_ID as course_i3_5_3_, student3_.INSTRUCTOR_ID as instruct4_5_3_, student3_.MEDICAL_TESTS as medical_1_5_3_, flightinst4_.INSTRUCTOR_ID as person_i1_4_4_, flightinst4_1_.SSN as ssn2_4_4_, flightinst4_1_.ADDRESS_ID as address_5_4_4_, flightinst4_1_.FIRST_NAME as first_na3_4_4_, flightinst4_1_.SECOND_NAME as second_n4_4_4_, flightinst4_.LICENCE_NO as licence_1_2_4_, flightinst4_.VALID as valid2_2_4_ from flights flight0_ left outer join FLIGHT_INSTRUCTORS flightinst1_ on flight0_.INSTRUCTOR_ID=flightinst1_.INSTRUCTOR_ID left outer join PERSONS flightinst1_1_ on flightinst1_.INSTRUCTOR_ID=flightinst1_1_.PERSON_ID left outer join ADDRESSES address2_ on flightinst1_1_.ADDRESS_ID=address2_.ID left outer join STUDENTS student3_ on flight0_.STUDENT_ID=student3_.STUDENT_ID left outer join PERSONS student3_1_ on student3_.STUDENT_ID=student3_1_.PERSON_ID left outer join FLIGHT_INSTRUCTORS flightinst4_ on student3_.INSTRUCTOR_ID=flightinst4_.INSTRUCTOR_ID left outer join PERSONS flightinst4_1_ on flightinst4_.INSTRUCTOR_ID=flightinst4_1_.PERSON_ID where flight0_.flight_id=?
[TRACE]  Starting root entity : model.Flight
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b432e53]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2b916808
[TRACE] .. Registering AssociationKey : AssociationKey(table=flights, columns={flight_id}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2b916808
[TRACE] >> Starting entity identifier : model.Flight
[DEBUG] Visiting attribute path : date
[TRACE] >> Starting attribute Attribute(name=date, type=LocalDate [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=date, type=LocalDate [non-identifier])
[DEBUG] Visiting attribute path : description
[TRACE] >> Starting attribute Attribute(name=description, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=description, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@62f11ebb]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@a6c54c3
[TRACE] .... Registering AssociationKey : AssociationKey(table=flights, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@a6c54c3
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[TRACE] >>>> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@580fd26b]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@78fe204a
[TRACE] ...... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@78fe204a
[TRACE] >>>>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : instructor.address.city
[TRACE] >>>>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.address.country
[TRACE] >>>>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.address.persons
[DEBUG] Property path deemed to be circular : instructor.address.persons
[DEBUG] Visiting attribute path : instructor.address.postalCode
[TRACE] >>>>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.address.street
[TRACE] >>>>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@78fe204a
[TRACE] <<<< Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[DEBUG] Property path deemed to be circular : instructor.flights
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[TRACE] >>>> Starting attribute Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1290ed28]
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7a3269f5]
[TRACE] <<<< Finishing up attribute : Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@a6c54c3
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : student
[TRACE] >> Starting attribute Attribute(name=student, type=model.Student [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5c887052]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@55fdf7f9
[TRACE] .... Registering AssociationKey : AssociationKey(table=flights, columns={STUDENT_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@55fdf7f9
[TRACE] >>>> Starting entity identifier : model.Student
[DEBUG] Visiting attribute path : student.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : student.address
[DEBUG] Property path deemed to be circular : student.address
[DEBUG] Visiting attribute path : student.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.course
[TRACE] >>>> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4091b9c3]
[TRACE] <<<< Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : student.flights
[DEBUG] Property path deemed to be circular : student.flights
[DEBUG] Visiting attribute path : student.instructor
[TRACE] >>>> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@29050de5]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@3610f277
[TRACE] ...... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@3610f277
[TRACE] >>>>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : student.instructor.SSN
[TRACE] >>>>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.address
[DEBUG] Property path deemed to be circular : student.instructor.address
[DEBUG] Visiting attribute path : student.instructor.firstName
[TRACE] >>>>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.secondName
[TRACE] >>>>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.flights
[DEBUG] Property path deemed to be circular : student.instructor.flights
[DEBUG] Visiting attribute path : student.instructor.licenceNo
[TRACE] >>>>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.students
[DEBUG] Property path deemed to be circular : student.instructor.students
[DEBUG] Visiting attribute path : student.instructor.valid
[TRACE] >>>>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@3610f277
[TRACE] <<<< Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : student.medicalTests
[TRACE] >>>> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.theoryClasses
[TRACE] >>>> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@c689973]
[DEBUG] Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@41fa769c]
[TRACE] <<<< Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@55fdf7f9
[TRACE] << Finishing up attribute : Attribute(name=student, type=model.Student [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@2b916808
[TRACE]  Finished root entity : model.Flight
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Flight)
    - Returns
       - EntityReturnImpl(entity=model.Flight, querySpaceUid=<gen:0>, path=model.Flight)
          - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:1>, path=model.Flight.instructor)
             - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:2>, path=model.Flight.instructor.address)
             - CollectionAttributeFetchImpl(collection=model.FlightInstructor.students, querySpaceUid=<gen:3>, path=model.Flight.instructor.students)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:4>, path=model.Flight.instructor.students.<elements>)
          - EntityAttributeFetchImpl(entity=model.Student, querySpaceUid=<gen:5>, path=model.Flight.student)
             - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:6>, path=model.Flight.student.course)
             - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:7>, path=model.Flight.student.instructor)
             - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:8>, path=model.Flight.student.theoryClasses)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:9>, path=model.Flight.student.theoryClasses.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Flight)
          - SQL table alias mapping - flight0_
          - alias suffix - 0_
          - suffixed key columns - {flight_i1_3_0_}
          - JOIN (JoinDefinedByMetadata(instructor)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.FlightInstructor)
                - SQL table alias mapping - flightinst1_
                - alias suffix - 1_
                - suffixed key columns - {person_i1_4_1_}
                - JOIN (JoinDefinedByMetadata(address)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.Address)
                      - SQL table alias mapping - address2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}
          - JOIN (JoinDefinedByMetadata(student)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=model.Student)
                - SQL table alias mapping - student3_
                - alias suffix - 3_
                - suffixed key columns - {person_i1_4_3_}
                - JOIN (JoinDefinedByMetadata(instructor)) : <gen:5> -> <gen:7>
                   - EntityQuerySpaceImpl(uid=<gen:7>, entity=model.FlightInstructor)
                      - SQL table alias mapping - flightinst4_
                      - alias suffix - 4_
                      - suffixed key columns - {person_i1_4_4_}

[DEBUG] Static select for entity model.Flight [READ]: select flight0_.flight_id as flight_i1_3_0_, flight0_.DATE as date2_3_0_, flight0_.DESCRIPTION as descript3_3_0_, flight0_.INSTRUCTOR_ID as instruct4_3_0_, flight0_.STUDENT_ID as student_5_3_0_, flightinst1_.INSTRUCTOR_ID as person_i1_4_1_, flightinst1_1_.SSN as ssn2_4_1_, flightinst1_1_.ADDRESS_ID as address_5_4_1_, flightinst1_1_.FIRST_NAME as first_na3_4_1_, flightinst1_1_.SECOND_NAME as second_n4_4_1_, flightinst1_.LICENCE_NO as licence_1_2_1_, flightinst1_.VALID as valid2_2_1_, address2_.ID as id1_0_2_, address2_.CITY as city2_0_2_, address2_.COUNTRY as country3_0_2_, address2_.POSTAL_CODE as postal_c4_0_2_, address2_.STREET as street5_0_2_, student3_.STUDENT_ID as person_i1_4_3_, student3_1_.SSN as ssn2_4_3_, student3_1_.ADDRESS_ID as address_5_4_3_, student3_1_.FIRST_NAME as first_na3_4_3_, student3_1_.SECOND_NAME as second_n4_4_3_, student3_.COURSE_ID as course_i3_5_3_, student3_.INSTRUCTOR_ID as instruct4_5_3_, student3_.MEDICAL_TESTS as medical_1_5_3_, flightinst4_.INSTRUCTOR_ID as person_i1_4_4_, flightinst4_1_.SSN as ssn2_4_4_, flightinst4_1_.ADDRESS_ID as address_5_4_4_, flightinst4_1_.FIRST_NAME as first_na3_4_4_, flightinst4_1_.SECOND_NAME as second_n4_4_4_, flightinst4_.LICENCE_NO as licence_1_2_4_, flightinst4_.VALID as valid2_2_4_ from flights flight0_ left outer join FLIGHT_INSTRUCTORS flightinst1_ on flight0_.INSTRUCTOR_ID=flightinst1_.INSTRUCTOR_ID left outer join PERSONS flightinst1_1_ on flightinst1_.INSTRUCTOR_ID=flightinst1_1_.PERSON_ID left outer join ADDRESSES address2_ on flightinst1_1_.ADDRESS_ID=address2_.ID left outer join STUDENTS student3_ on flight0_.STUDENT_ID=student3_.STUDENT_ID left outer join PERSONS student3_1_ on student3_.STUDENT_ID=student3_1_.PERSON_ID left outer join FLIGHT_INSTRUCTORS flightinst4_ on student3_.INSTRUCTOR_ID=flightinst4_.INSTRUCTOR_ID left outer join PERSONS flightinst4_1_ on flightinst4_.INSTRUCTOR_ID=flightinst4_1_.PERSON_ID where flight0_.flight_id=?
[DEBUG] Static select for action ACTION_MERGE on entity model.Flight: select flight0_.flight_id as flight_i1_3_0_, flight0_.DATE as date2_3_0_, flight0_.DESCRIPTION as descript3_3_0_, flight0_.INSTRUCTOR_ID as instruct4_3_0_, flight0_.STUDENT_ID as student_5_3_0_ from flights flight0_ where flight0_.flight_id=?
[DEBUG] Static select for action ACTION_REFRESH on entity model.Flight: select flight0_.flight_id as flight_i1_3_0_, flight0_.DATE as date2_3_0_, flight0_.DESCRIPTION as descript3_3_0_, flight0_.INSTRUCTOR_ID as instruct4_3_0_, flight0_.STUDENT_ID as student_5_3_0_ from flights flight0_ where flight0_.flight_id=?
[DEBUG] Static SQL for entity: model.Person
[DEBUG]  Version select: select PERSON_ID from PERSONS where PERSON_ID =?
[DEBUG]  Snapshot select: select person_.PERSON_ID, person_.SSN as ssn2_4_, person_.ADDRESS_ID as address_5_4_, person_.FIRST_NAME as first_na3_4_, person_.SECOND_NAME as second_n4_4_ from PERSONS person_ where person_.PERSON_ID=?
[DEBUG]  Insert 0: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME, PERSON_ID) values (?, ?, ?, ?, ?)
[DEBUG]  Update 0: update PERSONS set SSN=?, ADDRESS_ID=?, FIRST_NAME=?, SECOND_NAME=? where PERSON_ID=?
[DEBUG]  Delete 0: delete from PERSONS where PERSON_ID=?
[DEBUG]  Identity insert: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME) values (?, ?, ?, ?)
[TRACE]  Starting root entity : model.Person
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3878be7b]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7df28f1
[TRACE] .. Registering AssociationKey : AssociationKey(table=PERSONS, columns={PERSON_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7df28f1
[TRACE] >> Starting entity identifier : model.Person
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[TRACE] >> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4087c7fc]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@318c68d5
[TRACE] .... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@318c68d5
[TRACE] >>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : address.city
[TRACE] >>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.country
[TRACE] >>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.persons
[DEBUG] Property path deemed to be circular : address.persons
[DEBUG] Visiting attribute path : address.postalCode
[TRACE] >>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.street
[TRACE] >>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@318c68d5
[TRACE] << Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : flights
[DEBUG] Visiting attribute path : licenceNo
[TRACE] >> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : students
[TRACE] >> Starting attribute Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4cfa83f9]
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@321ca237]
[TRACE] << Finishing up attribute : Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Visiting attribute path : valid
[TRACE] >> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[DEBUG] Visiting attribute path : course
[TRACE] >> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4c5a2baf]
[TRACE] << Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1ec22831]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@63f855b
[TRACE] .... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@63f855b
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[DEBUG] Property path deemed to be circular : instructor.address
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[TRACE] >>>> Starting attribute Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@516592b1]
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4cffcc61]
[TRACE] <<<< Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[DEBUG] Property path deemed to be circular : instructor.students
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@63f855b
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : medicalTests
[TRACE] >> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : theoryClasses
[TRACE] >> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4373f66f]
[DEBUG] Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@399ca607]
[TRACE] << Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7df28f1
[TRACE]  Finished root entity : model.Person
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Person)
    - Returns
       - EntityReturnImpl(entity=model.Person, querySpaceUid=<gen:0>, path=model.Person)
          - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:1>, path=model.Person.address)
          - CollectionAttributeFetchImpl(collection=model.FlightInstructor.students, querySpaceUid=<gen:2>, path=model.Person.students)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:3>, path=model.Person.students.<elements>)
          - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:4>, path=model.Person.course)
          - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:5>, path=model.Person.instructor)
             - CollectionAttributeFetchImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:6>, path=model.Person.instructor.flights)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:7>, path=model.Person.instructor.flights.<elements>)
          - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:8>, path=model.Person.theoryClasses)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:9>, path=model.Person.theoryClasses.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {person_i1_4_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(instructor)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=model.FlightInstructor)
                - SQL table alias mapping - flightinst2_
                - alias suffix - 2_
                - suffixed key columns - {person_i1_4_2_}

[DEBUG] Static select for entity model.Person [NONE]: select person0_.PERSON_ID as person_i1_4_0_, person0_.SSN as ssn2_4_0_, person0_.ADDRESS_ID as address_5_4_0_, person0_.FIRST_NAME as first_na3_4_0_, person0_.SECOND_NAME as second_n4_4_0_, person0_1_.COURSE_ID as course_i3_5_0_, person0_1_.INSTRUCTOR_ID as instruct4_5_0_, person0_1_.MEDICAL_TESTS as medical_1_5_0_, person0_2_.LICENCE_NO as licence_1_2_0_, person0_2_.VALID as valid2_2_0_, case when person0_1_.STUDENT_ID is not null then 1 when person0_2_.INSTRUCTOR_ID is not null then 2 when person0_.PERSON_ID is not null then 0 end as clazz_0_, address1_.ID as id1_0_1_, address1_.CITY as city2_0_1_, address1_.COUNTRY as country3_0_1_, address1_.POSTAL_CODE as postal_c4_0_1_, address1_.STREET as street5_0_1_, flightinst2_.INSTRUCTOR_ID as person_i1_4_2_, flightinst2_1_.SSN as ssn2_4_2_, flightinst2_1_.ADDRESS_ID as address_5_4_2_, flightinst2_1_.FIRST_NAME as first_na3_4_2_, flightinst2_1_.SECOND_NAME as second_n4_4_2_, flightinst2_.LICENCE_NO as licence_1_2_2_, flightinst2_.VALID as valid2_2_2_ from PERSONS person0_ left outer join STUDENTS person0_1_ on person0_.PERSON_ID=person0_1_.STUDENT_ID left outer join FLIGHT_INSTRUCTORS person0_2_ on person0_.PERSON_ID=person0_2_.INSTRUCTOR_ID left outer join ADDRESSES address1_ on person0_.ADDRESS_ID=address1_.ID left outer join FLIGHT_INSTRUCTORS flightinst2_ on person0_1_.INSTRUCTOR_ID=flightinst2_.INSTRUCTOR_ID left outer join PERSONS flightinst2_1_ on flightinst2_.INSTRUCTOR_ID=flightinst2_1_.PERSON_ID where person0_.PERSON_ID=?
[TRACE]  Starting root entity : model.Person
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a235b8e]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@76536c53
[TRACE] .. Registering AssociationKey : AssociationKey(table=PERSONS, columns={PERSON_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@76536c53
[TRACE] >> Starting entity identifier : model.Person
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[TRACE] >> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38d08cb5]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@363c32cc
[TRACE] .... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@363c32cc
[TRACE] >>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : address.city
[TRACE] >>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.country
[TRACE] >>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.persons
[DEBUG] Property path deemed to be circular : address.persons
[DEBUG] Visiting attribute path : address.postalCode
[TRACE] >>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.street
[TRACE] >>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@363c32cc
[TRACE] << Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : flights
[DEBUG] Visiting attribute path : licenceNo
[TRACE] >> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : students
[TRACE] >> Starting attribute Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@6f3f0ae]
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6baf25d7]
[TRACE] << Finishing up attribute : Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Visiting attribute path : valid
[TRACE] >> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[DEBUG] Visiting attribute path : course
[TRACE] >> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@57a6a933]
[TRACE] << Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b5b59]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@1934ad7c
[TRACE] .... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@1934ad7c
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[DEBUG] Property path deemed to be circular : instructor.address
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[TRACE] >>>> Starting attribute Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@b27b210]
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@69aa7d76]
[TRACE] <<<< Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[DEBUG] Property path deemed to be circular : instructor.students
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@1934ad7c
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : medicalTests
[TRACE] >> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : theoryClasses
[TRACE] >> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@33f17289]
[DEBUG] Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@f1266c6]
[TRACE] << Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@76536c53
[TRACE]  Finished root entity : model.Person
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Person)
    - Returns
       - EntityReturnImpl(entity=model.Person, querySpaceUid=<gen:0>, path=model.Person)
          - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:1>, path=model.Person.address)
          - CollectionAttributeFetchImpl(collection=model.FlightInstructor.students, querySpaceUid=<gen:2>, path=model.Person.students)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:3>, path=model.Person.students.<elements>)
          - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:4>, path=model.Person.course)
          - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:5>, path=model.Person.instructor)
             - CollectionAttributeFetchImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:6>, path=model.Person.instructor.flights)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:7>, path=model.Person.instructor.flights.<elements>)
          - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:8>, path=model.Person.theoryClasses)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:9>, path=model.Person.theoryClasses.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {person_i1_4_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(instructor)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=model.FlightInstructor)
                - SQL table alias mapping - flightinst2_
                - alias suffix - 2_
                - suffixed key columns - {person_i1_4_2_}

[DEBUG] Static select for entity model.Person [READ]: select person0_.PERSON_ID as person_i1_4_0_, person0_.SSN as ssn2_4_0_, person0_.ADDRESS_ID as address_5_4_0_, person0_.FIRST_NAME as first_na3_4_0_, person0_.SECOND_NAME as second_n4_4_0_, person0_1_.COURSE_ID as course_i3_5_0_, person0_1_.INSTRUCTOR_ID as instruct4_5_0_, person0_1_.MEDICAL_TESTS as medical_1_5_0_, person0_2_.LICENCE_NO as licence_1_2_0_, person0_2_.VALID as valid2_2_0_, case when person0_1_.STUDENT_ID is not null then 1 when person0_2_.INSTRUCTOR_ID is not null then 2 when person0_.PERSON_ID is not null then 0 end as clazz_0_, address1_.ID as id1_0_1_, address1_.CITY as city2_0_1_, address1_.COUNTRY as country3_0_1_, address1_.POSTAL_CODE as postal_c4_0_1_, address1_.STREET as street5_0_1_, flightinst2_.INSTRUCTOR_ID as person_i1_4_2_, flightinst2_1_.SSN as ssn2_4_2_, flightinst2_1_.ADDRESS_ID as address_5_4_2_, flightinst2_1_.FIRST_NAME as first_na3_4_2_, flightinst2_1_.SECOND_NAME as second_n4_4_2_, flightinst2_.LICENCE_NO as licence_1_2_2_, flightinst2_.VALID as valid2_2_2_ from PERSONS person0_ left outer join STUDENTS person0_1_ on person0_.PERSON_ID=person0_1_.STUDENT_ID left outer join FLIGHT_INSTRUCTORS person0_2_ on person0_.PERSON_ID=person0_2_.INSTRUCTOR_ID left outer join ADDRESSES address1_ on person0_.ADDRESS_ID=address1_.ID left outer join FLIGHT_INSTRUCTORS flightinst2_ on person0_1_.INSTRUCTOR_ID=flightinst2_.INSTRUCTOR_ID left outer join PERSONS flightinst2_1_ on flightinst2_.INSTRUCTOR_ID=flightinst2_1_.PERSON_ID where person0_.PERSON_ID=?
[DEBUG] Static select for action ACTION_MERGE on entity model.Person: select person0_.PERSON_ID as person_i1_4_0_, person0_.SSN as ssn2_4_0_, person0_.ADDRESS_ID as address_5_4_0_, person0_.FIRST_NAME as first_na3_4_0_, person0_.SECOND_NAME as second_n4_4_0_, person0_1_.COURSE_ID as course_i3_5_0_, person0_1_.INSTRUCTOR_ID as instruct4_5_0_, person0_1_.MEDICAL_TESTS as medical_1_5_0_, person0_2_.LICENCE_NO as licence_1_2_0_, person0_2_.VALID as valid2_2_0_, case when person0_1_.STUDENT_ID is not null then 1 when person0_2_.INSTRUCTOR_ID is not null then 2 when person0_.PERSON_ID is not null then 0 end as clazz_0_ from PERSONS person0_ left outer join STUDENTS person0_1_ on person0_.PERSON_ID=person0_1_.STUDENT_ID left outer join FLIGHT_INSTRUCTORS person0_2_ on person0_.PERSON_ID=person0_2_.INSTRUCTOR_ID where person0_.PERSON_ID=?
[DEBUG] Static select for action ACTION_REFRESH on entity model.Person: select person0_.PERSON_ID as person_i1_4_0_, person0_.SSN as ssn2_4_0_, person0_.ADDRESS_ID as address_5_4_0_, person0_.FIRST_NAME as first_na3_4_0_, person0_.SECOND_NAME as second_n4_4_0_, person0_1_.COURSE_ID as course_i3_5_0_, person0_1_.INSTRUCTOR_ID as instruct4_5_0_, person0_1_.MEDICAL_TESTS as medical_1_5_0_, person0_2_.LICENCE_NO as licence_1_2_0_, person0_2_.VALID as valid2_2_0_, case when person0_1_.STUDENT_ID is not null then 1 when person0_2_.INSTRUCTOR_ID is not null then 2 when person0_.PERSON_ID is not null then 0 end as clazz_0_ from PERSONS person0_ left outer join STUDENTS person0_1_ on person0_.PERSON_ID=person0_1_.STUDENT_ID left outer join FLIGHT_INSTRUCTORS person0_2_ on person0_.PERSON_ID=person0_2_.INSTRUCTOR_ID where person0_.PERSON_ID=?
[DEBUG] Static SQL for entity: model.Address
[DEBUG]  Version select: select ID from ADDRESSES where ID =?
[DEBUG]  Snapshot select: select address_.ID, address_.CITY as city2_0_, address_.COUNTRY as country3_0_, address_.POSTAL_CODE as postal_c4_0_, address_.STREET as street5_0_ from ADDRESSES address_ where address_.ID=?
[DEBUG]  Insert 0: insert into ADDRESSES (CITY, COUNTRY, POSTAL_CODE, STREET, ID) values (?, ?, ?, ?, ?)
[DEBUG]  Update 0: update ADDRESSES set CITY=?, COUNTRY=?, POSTAL_CODE=?, STREET=? where ID=?
[DEBUG]  Delete 0: delete from ADDRESSES where ID=?
[DEBUG]  Identity insert: insert into ADDRESSES (CITY, COUNTRY, POSTAL_CODE, STREET) values (?, ?, ?, ?)
[TRACE]  Starting root entity : model.Address
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3913f206]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3e8799f
[TRACE] .. Registering AssociationKey : AssociationKey(table=ADDRESSES, columns={ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3e8799f
[TRACE] >> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : city
[TRACE] >> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : country
[TRACE] >> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : persons
[TRACE] >> Starting attribute Attribute(name=persons, type=java.util.Set(model.Address.persons) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3b353651]
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@270d43a7]
[TRACE] << Finishing up attribute : Attribute(name=persons, type=java.util.Set(model.Address.persons) [non-identifier,association])
[DEBUG] Visiting attribute path : postalCode
[TRACE] >> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : street
[TRACE] >> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@3e8799f
[TRACE]  Finished root entity : model.Address
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Address)
    - Returns
       - EntityReturnImpl(entity=model.Address, querySpaceUid=<gen:0>, path=model.Address)
          - CollectionAttributeFetchImpl(collection=model.Address.persons, querySpaceUid=<gen:1>, path=model.Address.persons)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Person, querySpaceUid=<gen:2>, path=model.Address.persons.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

[DEBUG] Static select for entity model.Address [NONE]: select address0_.ID as id1_0_0_, address0_.CITY as city2_0_0_, address0_.COUNTRY as country3_0_0_, address0_.POSTAL_CODE as postal_c4_0_0_, address0_.STREET as street5_0_0_ from ADDRESSES address0_ where address0_.ID=?
[TRACE]  Starting root entity : model.Address
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1280682]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@41ccb3b9
[TRACE] .. Registering AssociationKey : AssociationKey(table=ADDRESSES, columns={ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@41ccb3b9
[TRACE] >> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : city
[TRACE] >> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : country
[TRACE] >> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : persons
[TRACE] >> Starting attribute Attribute(name=persons, type=java.util.Set(model.Address.persons) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@53d9826f]
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1e84f3c8]
[TRACE] << Finishing up attribute : Attribute(name=persons, type=java.util.Set(model.Address.persons) [non-identifier,association])
[DEBUG] Visiting attribute path : postalCode
[TRACE] >> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : street
[TRACE] >> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@41ccb3b9
[TRACE]  Finished root entity : model.Address
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Address)
    - Returns
       - EntityReturnImpl(entity=model.Address, querySpaceUid=<gen:0>, path=model.Address)
          - CollectionAttributeFetchImpl(collection=model.Address.persons, querySpaceUid=<gen:1>, path=model.Address.persons)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Person, querySpaceUid=<gen:2>, path=model.Address.persons.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

[DEBUG] Static select for entity model.Address [READ]: select address0_.ID as id1_0_0_, address0_.CITY as city2_0_0_, address0_.COUNTRY as country3_0_0_, address0_.POSTAL_CODE as postal_c4_0_0_, address0_.STREET as street5_0_0_ from ADDRESSES address0_ where address0_.ID=?
[DEBUG] Static select for action ACTION_MERGE on entity model.Address: select address0_.ID as id1_0_0_, address0_.CITY as city2_0_0_, address0_.COUNTRY as country3_0_0_, address0_.POSTAL_CODE as postal_c4_0_0_, address0_.STREET as street5_0_0_ from ADDRESSES address0_ where address0_.ID=?
[DEBUG] Static select for action ACTION_REFRESH on entity model.Address: select address0_.ID as id1_0_0_, address0_.CITY as city2_0_0_, address0_.COUNTRY as country3_0_0_, address0_.POSTAL_CODE as postal_c4_0_0_, address0_.STREET as street5_0_0_ from ADDRESSES address0_ where address0_.ID=?
[DEBUG] Static SQL for entity: model.FlightInstructor
[DEBUG]  Version select: select PERSON_ID from PERSONS where PERSON_ID =?
[DEBUG]  Snapshot select: select flightinst_.INSTRUCTOR_ID, flightinst_1_.SSN as ssn2_4_, flightinst_1_.ADDRESS_ID as address_5_4_, flightinst_1_.FIRST_NAME as first_na3_4_, flightinst_1_.SECOND_NAME as second_n4_4_, flightinst_.LICENCE_NO as licence_1_2_, flightinst_.VALID as valid2_2_ from FLIGHT_INSTRUCTORS flightinst_ inner join PERSONS flightinst_1_ on flightinst_.INSTRUCTOR_ID=flightinst_1_.PERSON_ID where flightinst_.INSTRUCTOR_ID=?
[DEBUG]  Insert 0: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME, PERSON_ID) values (?, ?, ?, ?, ?)
[DEBUG]  Update 0: update PERSONS set SSN=?, ADDRESS_ID=?, FIRST_NAME=?, SECOND_NAME=? where PERSON_ID=?
[DEBUG]  Delete 0: delete from PERSONS where PERSON_ID=?
[DEBUG]  Insert 1: insert into FLIGHT_INSTRUCTORS (LICENCE_NO, VALID, INSTRUCTOR_ID) values (?, ?, ?)
[DEBUG]  Update 1: update FLIGHT_INSTRUCTORS set LICENCE_NO=?, VALID=? where INSTRUCTOR_ID=?
[DEBUG]  Delete 1: delete from FLIGHT_INSTRUCTORS where INSTRUCTOR_ID=?
[DEBUG]  Identity insert: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME) values (?, ?, ?, ?)
[TRACE]  Starting root entity : model.FlightInstructor
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5f59ea8c]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7b2ccba5
[TRACE] .. Registering AssociationKey : AssociationKey(table=FLIGHT_INSTRUCTORS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7b2ccba5
[TRACE] >> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[TRACE] >> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64f9f455]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5d5a51b1
[TRACE] .... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5d5a51b1
[TRACE] >>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : address.city
[TRACE] >>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.country
[TRACE] >>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.persons
[DEBUG] Property path deemed to be circular : address.persons
[DEBUG] Visiting attribute path : address.postalCode
[TRACE] >>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.street
[TRACE] >>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5d5a51b1
[TRACE] << Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : flights
[TRACE] >> Starting attribute Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4dc7cd1c]
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@50ab56e2]
[TRACE] << Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : licenceNo
[TRACE] >> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : students
[TRACE] >> Starting attribute Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7b5b5bfe]
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@74834afd]
[TRACE] << Finishing up attribute : Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Visiting attribute path : valid
[TRACE] >> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@7b2ccba5
[TRACE]  Finished root entity : model.FlightInstructor
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.FlightInstructor)
    - Returns
       - EntityReturnImpl(entity=model.FlightInstructor, querySpaceUid=<gen:0>, path=model.FlightInstructor)
          - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:1>, path=model.FlightInstructor.address)
          - CollectionAttributeFetchImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:2>, path=model.FlightInstructor.flights)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:3>, path=model.FlightInstructor.flights.<elements>)
          - CollectionAttributeFetchImpl(collection=model.FlightInstructor.students, querySpaceUid=<gen:4>, path=model.FlightInstructor.students)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:5>, path=model.FlightInstructor.students.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.FlightInstructor)
          - SQL table alias mapping - flightinst0_
          - alias suffix - 0_
          - suffixed key columns - {person_i1_4_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}

[DEBUG] Static select for entity model.FlightInstructor [NONE]: select flightinst0_.INSTRUCTOR_ID as person_i1_4_0_, flightinst0_1_.SSN as ssn2_4_0_, flightinst0_1_.ADDRESS_ID as address_5_4_0_, flightinst0_1_.FIRST_NAME as first_na3_4_0_, flightinst0_1_.SECOND_NAME as second_n4_4_0_, flightinst0_.LICENCE_NO as licence_1_2_0_, flightinst0_.VALID as valid2_2_0_, address1_.ID as id1_0_1_, address1_.CITY as city2_0_1_, address1_.COUNTRY as country3_0_1_, address1_.POSTAL_CODE as postal_c4_0_1_, address1_.STREET as street5_0_1_ from FLIGHT_INSTRUCTORS flightinst0_ inner join PERSONS flightinst0_1_ on flightinst0_.INSTRUCTOR_ID=flightinst0_1_.PERSON_ID left outer join ADDRESSES address1_ on flightinst0_1_.ADDRESS_ID=address1_.ID where flightinst0_.INSTRUCTOR_ID=?
[TRACE]  Starting root entity : model.FlightInstructor
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@75fd65c]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@d499c13
[TRACE] .. Registering AssociationKey : AssociationKey(table=FLIGHT_INSTRUCTORS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@d499c13
[TRACE] >> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[TRACE] >> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2ceca2ef]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@42d6c12d
[TRACE] .... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@42d6c12d
[TRACE] >>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : address.city
[TRACE] >>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.country
[TRACE] >>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.persons
[DEBUG] Property path deemed to be circular : address.persons
[DEBUG] Visiting attribute path : address.postalCode
[TRACE] >>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.street
[TRACE] >>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@42d6c12d
[TRACE] << Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : flights
[TRACE] >> Starting attribute Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3b42121d]
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7a2ab862]
[TRACE] << Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : licenceNo
[TRACE] >> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : students
[TRACE] >> Starting attribute Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@33188612]
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4733f6f5]
[TRACE] << Finishing up attribute : Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Visiting attribute path : valid
[TRACE] >> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@d499c13
[TRACE]  Finished root entity : model.FlightInstructor
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.FlightInstructor)
    - Returns
       - EntityReturnImpl(entity=model.FlightInstructor, querySpaceUid=<gen:0>, path=model.FlightInstructor)
          - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:1>, path=model.FlightInstructor.address)
          - CollectionAttributeFetchImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:2>, path=model.FlightInstructor.flights)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:3>, path=model.FlightInstructor.flights.<elements>)
          - CollectionAttributeFetchImpl(collection=model.FlightInstructor.students, querySpaceUid=<gen:4>, path=model.FlightInstructor.students)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:5>, path=model.FlightInstructor.students.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.FlightInstructor)
          - SQL table alias mapping - flightinst0_
          - alias suffix - 0_
          - suffixed key columns - {person_i1_4_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}

[DEBUG] Static select for entity model.FlightInstructor [READ]: select flightinst0_.INSTRUCTOR_ID as person_i1_4_0_, flightinst0_1_.SSN as ssn2_4_0_, flightinst0_1_.ADDRESS_ID as address_5_4_0_, flightinst0_1_.FIRST_NAME as first_na3_4_0_, flightinst0_1_.SECOND_NAME as second_n4_4_0_, flightinst0_.LICENCE_NO as licence_1_2_0_, flightinst0_.VALID as valid2_2_0_, address1_.ID as id1_0_1_, address1_.CITY as city2_0_1_, address1_.COUNTRY as country3_0_1_, address1_.POSTAL_CODE as postal_c4_0_1_, address1_.STREET as street5_0_1_ from FLIGHT_INSTRUCTORS flightinst0_ inner join PERSONS flightinst0_1_ on flightinst0_.INSTRUCTOR_ID=flightinst0_1_.PERSON_ID left outer join ADDRESSES address1_ on flightinst0_1_.ADDRESS_ID=address1_.ID where flightinst0_.INSTRUCTOR_ID=?
[DEBUG] Static select for action ACTION_MERGE on entity model.FlightInstructor: select flightinst0_.INSTRUCTOR_ID as person_i1_4_0_, flightinst0_1_.SSN as ssn2_4_0_, flightinst0_1_.ADDRESS_ID as address_5_4_0_, flightinst0_1_.FIRST_NAME as first_na3_4_0_, flightinst0_1_.SECOND_NAME as second_n4_4_0_, flightinst0_.LICENCE_NO as licence_1_2_0_, flightinst0_.VALID as valid2_2_0_ from FLIGHT_INSTRUCTORS flightinst0_ inner join PERSONS flightinst0_1_ on flightinst0_.INSTRUCTOR_ID=flightinst0_1_.PERSON_ID where flightinst0_.INSTRUCTOR_ID=?
[DEBUG] Static select for action ACTION_REFRESH on entity model.FlightInstructor: select flightinst0_.INSTRUCTOR_ID as person_i1_4_0_, flightinst0_1_.SSN as ssn2_4_0_, flightinst0_1_.ADDRESS_ID as address_5_4_0_, flightinst0_1_.FIRST_NAME as first_na3_4_0_, flightinst0_1_.SECOND_NAME as second_n4_4_0_, flightinst0_.LICENCE_NO as licence_1_2_0_, flightinst0_.VALID as valid2_2_0_ from FLIGHT_INSTRUCTORS flightinst0_ inner join PERSONS flightinst0_1_ on flightinst0_.INSTRUCTOR_ID=flightinst0_1_.PERSON_ID where flightinst0_.INSTRUCTOR_ID=?
[DEBUG] Static SQL for entity: model.Student
[DEBUG]  Version select: select PERSON_ID from PERSONS where PERSON_ID =?
[DEBUG]  Snapshot select: select student_.STUDENT_ID, student_1_.SSN as ssn2_4_, student_1_.ADDRESS_ID as address_5_4_, student_1_.FIRST_NAME as first_na3_4_, student_1_.SECOND_NAME as second_n4_4_, student_.COURSE_ID as course_i3_5_, student_.INSTRUCTOR_ID as instruct4_5_, student_.MEDICAL_TESTS as medical_1_5_ from STUDENTS student_ inner join PERSONS student_1_ on student_.STUDENT_ID=student_1_.PERSON_ID where student_.STUDENT_ID=?
[DEBUG]  Insert 0: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME, PERSON_ID) values (?, ?, ?, ?, ?)
[DEBUG]  Update 0: update PERSONS set SSN=?, ADDRESS_ID=?, FIRST_NAME=?, SECOND_NAME=? where PERSON_ID=?
[DEBUG]  Delete 0: delete from PERSONS where PERSON_ID=?
[DEBUG]  Insert 1: insert into STUDENTS (COURSE_ID, INSTRUCTOR_ID, MEDICAL_TESTS, STUDENT_ID) values (?, ?, ?, ?)
[DEBUG]  Update 1: update STUDENTS set COURSE_ID=?, INSTRUCTOR_ID=?, MEDICAL_TESTS=? where STUDENT_ID=?
[DEBUG]  Delete 1: delete from STUDENTS where STUDENT_ID=?
[DEBUG]  Identity insert: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME) values (?, ?, ?, ?)
[TRACE]  Starting root entity : model.Student
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ccac6f4]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@438c9aa7
[TRACE] .. Registering AssociationKey : AssociationKey(table=STUDENTS, columns={STUDENT_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@438c9aa7
[TRACE] >> Starting entity identifier : model.Student
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[TRACE] >> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3453acd2]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@6c8f60f3
[TRACE] .... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@6c8f60f3
[TRACE] >>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : address.city
[TRACE] >>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.country
[TRACE] >>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.persons
[DEBUG] Property path deemed to be circular : address.persons
[DEBUG] Visiting attribute path : address.postalCode
[TRACE] >>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.street
[TRACE] >>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@6c8f60f3
[TRACE] << Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : course
[TRACE] >> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@56c8e6f0]
[TRACE] << Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : flights
[TRACE] >> Starting attribute Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@71b6172c]
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@58aa10f4]
[TRACE] << Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4fb56bea]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5e5beb8a
[TRACE] .... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5e5beb8a
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[DEBUG] Property path deemed to be circular : instructor.address
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[TRACE] >>>> Starting attribute Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@1f95881a]
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@17b016ac]
[TRACE] <<<< Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[DEBUG] Property path deemed to be circular : instructor.students
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5e5beb8a
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : medicalTests
[TRACE] >> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : theoryClasses
[TRACE] >> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@733ec58b]
[DEBUG] Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@723877dd]
[TRACE] << Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@438c9aa7
[TRACE]  Finished root entity : model.Student
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Student)
    - Returns
       - EntityReturnImpl(entity=model.Student, querySpaceUid=<gen:0>, path=model.Student)
          - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:1>, path=model.Student.address)
          - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:2>, path=model.Student.course)
          - CollectionAttributeFetchImpl(collection=model.Student.flights, querySpaceUid=<gen:3>, path=model.Student.flights)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:4>, path=model.Student.flights.<elements>)
          - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:5>, path=model.Student.instructor)
             - CollectionAttributeFetchImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:6>, path=model.Student.instructor.flights)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:7>, path=model.Student.instructor.flights.<elements>)
          - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:8>, path=model.Student.theoryClasses)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:9>, path=model.Student.theoryClasses.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Student)
          - SQL table alias mapping - student0_
          - alias suffix - 0_
          - suffixed key columns - {person_i1_4_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(instructor)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=model.FlightInstructor)
                - SQL table alias mapping - flightinst2_
                - alias suffix - 2_
                - suffixed key columns - {person_i1_4_2_}

[DEBUG] Static select for entity model.Student [NONE]: select student0_.STUDENT_ID as person_i1_4_0_, student0_1_.SSN as ssn2_4_0_, student0_1_.ADDRESS_ID as address_5_4_0_, student0_1_.FIRST_NAME as first_na3_4_0_, student0_1_.SECOND_NAME as second_n4_4_0_, student0_.COURSE_ID as course_i3_5_0_, student0_.INSTRUCTOR_ID as instruct4_5_0_, student0_.MEDICAL_TESTS as medical_1_5_0_, address1_.ID as id1_0_1_, address1_.CITY as city2_0_1_, address1_.COUNTRY as country3_0_1_, address1_.POSTAL_CODE as postal_c4_0_1_, address1_.STREET as street5_0_1_, flightinst2_.INSTRUCTOR_ID as person_i1_4_2_, flightinst2_1_.SSN as ssn2_4_2_, flightinst2_1_.ADDRESS_ID as address_5_4_2_, flightinst2_1_.FIRST_NAME as first_na3_4_2_, flightinst2_1_.SECOND_NAME as second_n4_4_2_, flightinst2_.LICENCE_NO as licence_1_2_2_, flightinst2_.VALID as valid2_2_2_ from STUDENTS student0_ inner join PERSONS student0_1_ on student0_.STUDENT_ID=student0_1_.PERSON_ID left outer join ADDRESSES address1_ on student0_1_.ADDRESS_ID=address1_.ID left outer join FLIGHT_INSTRUCTORS flightinst2_ on student0_.INSTRUCTOR_ID=flightinst2_.INSTRUCTOR_ID left outer join PERSONS flightinst2_1_ on flightinst2_.INSTRUCTOR_ID=flightinst2_1_.PERSON_ID where student0_.STUDENT_ID=?
[TRACE]  Starting root entity : model.Student
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@415ef4d8]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@56cc9f29
[TRACE] .. Registering AssociationKey : AssociationKey(table=STUDENTS, columns={STUDENT_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@56cc9f29
[TRACE] >> Starting entity identifier : model.Student
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[TRACE] >> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@535b1ae6]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@626c19cf
[TRACE] .... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@626c19cf
[TRACE] >>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : address.city
[TRACE] >>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.country
[TRACE] >>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.persons
[DEBUG] Property path deemed to be circular : address.persons
[DEBUG] Visiting attribute path : address.postalCode
[TRACE] >>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.street
[TRACE] >>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@626c19cf
[TRACE] << Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : course
[TRACE] >> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54a2d96e]
[TRACE] << Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : flights
[TRACE] >> Starting attribute Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@66a53104]
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6d229b1c]
[TRACE] << Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6f825516]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@2da99821
[TRACE] .... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@2da99821
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[DEBUG] Property path deemed to be circular : instructor.address
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[TRACE] >>>> Starting attribute Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@62cba181]
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1b482cbf]
[TRACE] <<<< Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[DEBUG] Property path deemed to be circular : instructor.students
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@2da99821
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : medicalTests
[TRACE] >> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : theoryClasses
[TRACE] >> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@661fe025]
[DEBUG] Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7161457]
[TRACE] << Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@56cc9f29
[TRACE]  Finished root entity : model.Student
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.Student)
    - Returns
       - EntityReturnImpl(entity=model.Student, querySpaceUid=<gen:0>, path=model.Student)
          - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:1>, path=model.Student.address)
          - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:2>, path=model.Student.course)
          - CollectionAttributeFetchImpl(collection=model.Student.flights, querySpaceUid=<gen:3>, path=model.Student.flights)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:4>, path=model.Student.flights.<elements>)
          - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:5>, path=model.Student.instructor)
             - CollectionAttributeFetchImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:6>, path=model.Student.instructor.flights)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:7>, path=model.Student.instructor.flights.<elements>)
          - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:8>, path=model.Student.theoryClasses)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:9>, path=model.Student.theoryClasses.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.Student)
          - SQL table alias mapping - student0_
          - alias suffix - 0_
          - suffixed key columns - {person_i1_4_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(instructor)) : <gen:0> -> <gen:5>
             - EntityQuerySpaceImpl(uid=<gen:5>, entity=model.FlightInstructor)
                - SQL table alias mapping - flightinst2_
                - alias suffix - 2_
                - suffixed key columns - {person_i1_4_2_}

[DEBUG] Static select for entity model.Student [READ]: select student0_.STUDENT_ID as person_i1_4_0_, student0_1_.SSN as ssn2_4_0_, student0_1_.ADDRESS_ID as address_5_4_0_, student0_1_.FIRST_NAME as first_na3_4_0_, student0_1_.SECOND_NAME as second_n4_4_0_, student0_.COURSE_ID as course_i3_5_0_, student0_.INSTRUCTOR_ID as instruct4_5_0_, student0_.MEDICAL_TESTS as medical_1_5_0_, address1_.ID as id1_0_1_, address1_.CITY as city2_0_1_, address1_.COUNTRY as country3_0_1_, address1_.POSTAL_CODE as postal_c4_0_1_, address1_.STREET as street5_0_1_, flightinst2_.INSTRUCTOR_ID as person_i1_4_2_, flightinst2_1_.SSN as ssn2_4_2_, flightinst2_1_.ADDRESS_ID as address_5_4_2_, flightinst2_1_.FIRST_NAME as first_na3_4_2_, flightinst2_1_.SECOND_NAME as second_n4_4_2_, flightinst2_.LICENCE_NO as licence_1_2_2_, flightinst2_.VALID as valid2_2_2_ from STUDENTS student0_ inner join PERSONS student0_1_ on student0_.STUDENT_ID=student0_1_.PERSON_ID left outer join ADDRESSES address1_ on student0_1_.ADDRESS_ID=address1_.ID left outer join FLIGHT_INSTRUCTORS flightinst2_ on student0_.INSTRUCTOR_ID=flightinst2_.INSTRUCTOR_ID left outer join PERSONS flightinst2_1_ on flightinst2_.INSTRUCTOR_ID=flightinst2_1_.PERSON_ID where student0_.STUDENT_ID=?
[DEBUG] Static select for action ACTION_MERGE on entity model.Student: select student0_.STUDENT_ID as person_i1_4_0_, student0_1_.SSN as ssn2_4_0_, student0_1_.ADDRESS_ID as address_5_4_0_, student0_1_.FIRST_NAME as first_na3_4_0_, student0_1_.SECOND_NAME as second_n4_4_0_, student0_.COURSE_ID as course_i3_5_0_, student0_.INSTRUCTOR_ID as instruct4_5_0_, student0_.MEDICAL_TESTS as medical_1_5_0_ from STUDENTS student0_ inner join PERSONS student0_1_ on student0_.STUDENT_ID=student0_1_.PERSON_ID where student0_.STUDENT_ID=?
[DEBUG] Static select for action ACTION_REFRESH on entity model.Student: select student0_.STUDENT_ID as person_i1_4_0_, student0_1_.SSN as ssn2_4_0_, student0_1_.ADDRESS_ID as address_5_4_0_, student0_1_.FIRST_NAME as first_na3_4_0_, student0_1_.SECOND_NAME as second_n4_4_0_, student0_.COURSE_ID as course_i3_5_0_, student0_.INSTRUCTOR_ID as instruct4_5_0_, student0_.MEDICAL_TESTS as medical_1_5_0_ from STUDENTS student0_ inner join PERSONS student0_1_ on student0_.STUDENT_ID=student0_1_.PERSON_ID where student0_.STUDENT_ID=?
[DEBUG] Static SQL for entity: model.TheoryClass
[DEBUG]  Version select: select CLASS_ID from TheoryClass where CLASS_ID =?
[DEBUG]  Snapshot select: select theoryclas_.CLASS_ID, theoryclas_.GRADE as grade2_7_, theoryclas_.HOURS as hours3_7_, theoryclas_.NAME as name4_7_ from TheoryClass theoryclas_ where theoryclas_.CLASS_ID=?
[DEBUG]  Insert 0: insert into TheoryClass (GRADE, HOURS, NAME, CLASS_ID) values (?, ?, ?, ?)
[DEBUG]  Update 0: update TheoryClass set GRADE=?, HOURS=?, NAME=? where CLASS_ID=?
[DEBUG]  Delete 0: delete from TheoryClass where CLASS_ID=?
[TRACE]  Starting root entity : model.TheoryClass
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@38ee7a9d]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@629984eb
[TRACE] .. Registering AssociationKey : AssociationKey(table=TheoryClass, columns={CLASS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@629984eb
[TRACE] >> Starting entity identifier : model.TheoryClass
[DEBUG] Visiting attribute path : grade
[TRACE] >> Starting attribute Attribute(name=grade, type=integer [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=grade, type=integer [non-identifier])
[DEBUG] Visiting attribute path : hours
[TRACE] >> Starting attribute Attribute(name=hours, type=integer [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=hours, type=integer [non-identifier])
[DEBUG] Visiting attribute path : name
[TRACE] >> Starting attribute Attribute(name=name, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=name, type=string [non-identifier])
[DEBUG] Visiting attribute path : students
[TRACE] >> Starting attribute Attribute(name=students, type=java.util.Set(model.TheoryClass.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7b1e5e55]
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4c1d59cd]
[TRACE] << Finishing up attribute : Attribute(name=students, type=java.util.Set(model.TheoryClass.students) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@629984eb
[TRACE]  Finished root entity : model.TheoryClass
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.TheoryClass)
    - Returns
       - EntityReturnImpl(entity=model.TheoryClass, querySpaceUid=<gen:0>, path=model.TheoryClass)
          - CollectionAttributeFetchImpl(collection=model.TheoryClass.students, querySpaceUid=<gen:1>, path=model.TheoryClass.students)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:2>, path=model.TheoryClass.students.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.TheoryClass)
          - SQL table alias mapping - theoryclas0_
          - alias suffix - 0_
          - suffixed key columns - {class_id1_7_0_}

[DEBUG] Static select for entity model.TheoryClass [NONE]: select theoryclas0_.CLASS_ID as class_id1_7_0_, theoryclas0_.GRADE as grade2_7_0_, theoryclas0_.HOURS as hours3_7_0_, theoryclas0_.NAME as name4_7_0_ from TheoryClass theoryclas0_ where theoryclas0_.CLASS_ID=?
[TRACE]  Starting root entity : model.TheoryClass
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@76cf841]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@297c9a9b
[TRACE] .. Registering AssociationKey : AssociationKey(table=TheoryClass, columns={CLASS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@297c9a9b
[TRACE] >> Starting entity identifier : model.TheoryClass
[DEBUG] Visiting attribute path : grade
[TRACE] >> Starting attribute Attribute(name=grade, type=integer [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=grade, type=integer [non-identifier])
[DEBUG] Visiting attribute path : hours
[TRACE] >> Starting attribute Attribute(name=hours, type=integer [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=hours, type=integer [non-identifier])
[DEBUG] Visiting attribute path : name
[TRACE] >> Starting attribute Attribute(name=name, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=name, type=string [non-identifier])
[DEBUG] Visiting attribute path : students
[TRACE] >> Starting attribute Attribute(name=students, type=java.util.Set(model.TheoryClass.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@20999517]
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ec63f8]
[TRACE] << Finishing up attribute : Attribute(name=students, type=java.util.Set(model.TheoryClass.students) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityReturnImpl@297c9a9b
[TRACE]  Finished root entity : model.TheoryClass
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(entity=model.TheoryClass)
    - Returns
       - EntityReturnImpl(entity=model.TheoryClass, querySpaceUid=<gen:0>, path=model.TheoryClass)
          - CollectionAttributeFetchImpl(collection=model.TheoryClass.students, querySpaceUid=<gen:1>, path=model.TheoryClass.students)
             - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:2>, path=model.TheoryClass.students.<elements>)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.TheoryClass)
          - SQL table alias mapping - theoryclas0_
          - alias suffix - 0_
          - suffixed key columns - {class_id1_7_0_}

[DEBUG] Static select for entity model.TheoryClass [READ]: select theoryclas0_.CLASS_ID as class_id1_7_0_, theoryclas0_.GRADE as grade2_7_0_, theoryclas0_.HOURS as hours3_7_0_, theoryclas0_.NAME as name4_7_0_ from TheoryClass theoryclas0_ where theoryclas0_.CLASS_ID=?
[DEBUG] Static select for action ACTION_MERGE on entity model.TheoryClass: select theoryclas0_.CLASS_ID as class_id1_7_0_, theoryclas0_.GRADE as grade2_7_0_, theoryclas0_.HOURS as hours3_7_0_, theoryclas0_.NAME as name4_7_0_ from TheoryClass theoryclas0_ where theoryclas0_.CLASS_ID=?
[DEBUG] Static select for action ACTION_REFRESH on entity model.TheoryClass: select theoryclas0_.CLASS_ID as class_id1_7_0_, theoryclas0_.GRADE as grade2_7_0_, theoryclas0_.HOURS as hours3_7_0_, theoryclas0_.NAME as name4_7_0_ from TheoryClass theoryclas0_ where theoryclas0_.CLASS_ID=?
[TRACE]  Starting root collection : model.TheoryClass.students
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2e1b374c]
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3fcee3d9]
[TRACE] Pushing collection reference to stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@9c93d16
[TRACE]  Registering AssociationKey : AssociationKey(table=STUDENTS_CLASSES, columns={CLASS_ID}) -> null
[TRACE]  Starting collection element graph : model.TheoryClass.students
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@5489b1f7
[TRACE] .. Registering AssociationKey : AssociationKey(table=STUDENTS_CLASSES, columns={STUDENT_ID}) -> org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@5489b1f7
[TRACE] >> Starting entity identifier : model.Student
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[TRACE] >> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4faf104]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5995851e
[TRACE] .... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5995851e
[TRACE] >>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : address.city
[TRACE] >>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.country
[TRACE] >>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.persons
[DEBUG] Property path deemed to be circular : address.persons
[DEBUG] Visiting attribute path : address.postalCode
[TRACE] >>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.street
[TRACE] >>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5995851e
[TRACE] << Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : course
[TRACE] >> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@48a2db72]
[TRACE] << Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : flights
[TRACE] >> Starting attribute Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@51bddd98]
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@21c747a]
[TRACE] << Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77d4ac52]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@29f38091
[TRACE] .... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@29f38091
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[DEBUG] Property path deemed to be circular : instructor.address
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[TRACE] >>>> Starting attribute Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@161dd92a]
[DEBUG] Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77c3c037]
[TRACE] <<<< Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[DEBUG] Property path deemed to be circular : instructor.students
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@29f38091
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : medicalTests
[TRACE] >> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : theoryClasses
[DEBUG] Property path deemed to be circular : theoryClasses
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@5489b1f7
[TRACE]  Finished collection element graph : model.TheoryClass.students
[TRACE] Popped collection reference from stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@9c93d16
[TRACE]  Finished root collection : model.TheoryClass.students
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(collection=model.TheoryClass.students)
    - Returns
       - CollectionReturnImpl(collection=model.TheoryClass.students, querySpaceUid=<gen:0>, path=[model.TheoryClass.students])
          - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:1>, path=[model.TheoryClass.students].<elements>)
             - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:2>, path=[model.TheoryClass.students].<elements>.address)
             - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:3>, path=[model.TheoryClass.students].<elements>.course)
             - CollectionAttributeFetchImpl(collection=model.Student.flights, querySpaceUid=<gen:4>, path=[model.TheoryClass.students].<elements>.flights)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:5>, path=[model.TheoryClass.students].<elements>.flights.<elements>)
             - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:6>, path=[model.TheoryClass.students].<elements>.instructor)
                - CollectionAttributeFetchImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:7>, path=[model.TheoryClass.students].<elements>.instructor.flights)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:8>, path=[model.TheoryClass.students].<elements>.instructor.flights.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=model.TheoryClass.students)
          - SQL table alias mapping - students0_
          - alias suffix - 0_
          - suffixed key columns - {class_id1_6_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - person_i1_4_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Student)
                - SQL table alias mapping - student1_
                - alias suffix - 1_
                - suffixed key columns - {person_i1_4_1_}
                - JOIN (JoinDefinedByMetadata(address)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.Address)
                      - SQL table alias mapping - address2_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}
                - JOIN (JoinDefinedByMetadata(instructor)) : <gen:1> -> <gen:6>
                   - EntityQuerySpaceImpl(uid=<gen:6>, entity=model.FlightInstructor)
                      - SQL table alias mapping - flightinst3_
                      - alias suffix - 3_
                      - suffixed key columns - {person_i1_4_3_}

[DEBUG] Static select for collection model.TheoryClass.students: select students0_.CLASS_ID as class_id1_6_0_, students0_.STUDENT_ID as student_2_6_0_, student1_.STUDENT_ID as person_i1_4_1_, student1_1_.SSN as ssn2_4_1_, student1_1_.ADDRESS_ID as address_5_4_1_, student1_1_.FIRST_NAME as first_na3_4_1_, student1_1_.SECOND_NAME as second_n4_4_1_, student1_.COURSE_ID as course_i3_5_1_, student1_.INSTRUCTOR_ID as instruct4_5_1_, student1_.MEDICAL_TESTS as medical_1_5_1_, address2_.ID as id1_0_2_, address2_.CITY as city2_0_2_, address2_.COUNTRY as country3_0_2_, address2_.POSTAL_CODE as postal_c4_0_2_, address2_.STREET as street5_0_2_, flightinst3_.INSTRUCTOR_ID as person_i1_4_3_, flightinst3_1_.SSN as ssn2_4_3_, flightinst3_1_.ADDRESS_ID as address_5_4_3_, flightinst3_1_.FIRST_NAME as first_na3_4_3_, flightinst3_1_.SECOND_NAME as second_n4_4_3_, flightinst3_.LICENCE_NO as licence_1_2_3_, flightinst3_.VALID as valid2_2_3_ from STUDENTS_CLASSES students0_ inner join STUDENTS student1_ on students0_.STUDENT_ID=student1_.STUDENT_ID left outer join PERSONS student1_1_ on student1_.STUDENT_ID=student1_1_.PERSON_ID left outer join ADDRESSES address2_ on student1_1_.ADDRESS_ID=address2_.ID left outer join FLIGHT_INSTRUCTORS flightinst3_ on student1_.INSTRUCTOR_ID=flightinst3_.INSTRUCTOR_ID left outer join PERSONS flightinst3_1_ on flightinst3_.INSTRUCTOR_ID=flightinst3_1_.PERSON_ID where students0_.CLASS_ID=?
[TRACE]  Starting root collection : model.FlightInstructor.flights
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@16da476c]
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2fd72332]
[TRACE] Pushing collection reference to stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@51f18e31
[TRACE]  Registering AssociationKey : AssociationKey(table=flights, columns={INSTRUCTOR_ID}) -> null
[TRACE]  Starting collection element graph : model.FlightInstructor.flights
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@60ed12e8
[TRACE] >> Starting entity identifier : model.Flight
[DEBUG] Visiting attribute path : date
[TRACE] >> Starting attribute Attribute(name=date, type=LocalDate [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=date, type=LocalDate [non-identifier])
[DEBUG] Visiting attribute path : description
[TRACE] >> Starting attribute Attribute(name=description, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=description, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor
[DEBUG] Property path deemed to be circular : instructor
[DEBUG] Visiting attribute path : student
[TRACE] >> Starting attribute Attribute(name=student, type=model.Student [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@24c8d8be]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@3290b1a6
[TRACE] .... Registering AssociationKey : AssociationKey(table=flights, columns={STUDENT_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@3290b1a6
[TRACE] >>>> Starting entity identifier : model.Student
[DEBUG] Visiting attribute path : student.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : student.address
[TRACE] >>>> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6fcd31c3]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@67bf0480
[TRACE] ...... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@67bf0480
[TRACE] >>>>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : student.address.city
[TRACE] >>>>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.address.country
[TRACE] >>>>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.address.persons
[DEBUG] Property path deemed to be circular : student.address.persons
[DEBUG] Visiting attribute path : student.address.postalCode
[TRACE] >>>>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.address.street
[TRACE] >>>>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@67bf0480
[TRACE] <<<< Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : student.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.course
[TRACE] >>>> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5503de1]
[TRACE] <<<< Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : student.flights
[DEBUG] Property path deemed to be circular : student.flights
[DEBUG] Visiting attribute path : student.instructor
[TRACE] >>>> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@32faa16c]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@343fddd9
[TRACE] ...... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@343fddd9
[TRACE] >>>>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : student.instructor.SSN
[TRACE] >>>>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.address
[DEBUG] Property path deemed to be circular : student.instructor.address
[DEBUG] Visiting attribute path : student.instructor.firstName
[TRACE] >>>>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.secondName
[TRACE] >>>>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.flights
[DEBUG] Property path deemed to be circular : student.instructor.flights
[DEBUG] Visiting attribute path : student.instructor.licenceNo
[TRACE] >>>>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : student.instructor.students
[DEBUG] Property path deemed to be circular : student.instructor.students
[DEBUG] Visiting attribute path : student.instructor.valid
[TRACE] >>>>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@343fddd9
[TRACE] <<<< Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : student.medicalTests
[TRACE] >>>> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : student.theoryClasses
[TRACE] >>>> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@2bbb44da]
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f80cb79]
[TRACE] <<<< Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@3290b1a6
[TRACE] << Finishing up attribute : Attribute(name=student, type=model.Student [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@60ed12e8
[TRACE]  Finished collection element graph : model.FlightInstructor.flights
[TRACE] Popped collection reference from stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@51f18e31
[TRACE]  Finished root collection : model.FlightInstructor.flights
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(collection=model.FlightInstructor.flights)
    - Returns
       - CollectionReturnImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:0>, path=[model.FlightInstructor.flights])
          - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:1>, path=[model.FlightInstructor.flights].<elements>)
             - EntityAttributeFetchImpl(entity=model.Student, querySpaceUid=<gen:2>, path=[model.FlightInstructor.flights].<elements>.student)
                - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:3>, path=[model.FlightInstructor.flights].<elements>.student.address)
                - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:4>, path=[model.FlightInstructor.flights].<elements>.student.course)
                - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:5>, path=[model.FlightInstructor.flights].<elements>.student.instructor)
                - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:6>, path=[model.FlightInstructor.flights].<elements>.student.theoryClasses)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:7>, path=[model.FlightInstructor.flights].<elements>.student.theoryClasses.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=model.FlightInstructor.flights)
          - SQL table alias mapping - flights0_
          - alias suffix - 0_
          - suffixed key columns - {instruct4_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - flight_i1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Flight)
                - SQL table alias mapping - flights0_
                - alias suffix - 1_
                - suffixed key columns - {flight_i1_3_1_}
                - JOIN (JoinDefinedByMetadata(student)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.Student)
                      - SQL table alias mapping - student1_
                      - alias suffix - 2_
                      - suffixed key columns - {person_i1_4_2_}
                      - JOIN (JoinDefinedByMetadata(address)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=model.Address)
                            - SQL table alias mapping - address2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}
                      - JOIN (JoinDefinedByMetadata(instructor)) : <gen:2> -> <gen:5>
                         - EntityQuerySpaceImpl(uid=<gen:5>, entity=model.FlightInstructor)
                            - SQL table alias mapping - flightinst3_
                            - alias suffix - 4_
                            - suffixed key columns - {person_i1_4_4_}

[DEBUG] Static select for collection model.FlightInstructor.flights: select flights0_.INSTRUCTOR_ID as instruct4_3_0_, flights0_.flight_id as flight_i1_3_0_, flights0_.flight_id as flight_i1_3_1_, flights0_.DATE as date2_3_1_, flights0_.DESCRIPTION as descript3_3_1_, flights0_.INSTRUCTOR_ID as instruct4_3_1_, flights0_.STUDENT_ID as student_5_3_1_, student1_.STUDENT_ID as person_i1_4_2_, student1_1_.SSN as ssn2_4_2_, student1_1_.ADDRESS_ID as address_5_4_2_, student1_1_.FIRST_NAME as first_na3_4_2_, student1_1_.SECOND_NAME as second_n4_4_2_, student1_.COURSE_ID as course_i3_5_2_, student1_.INSTRUCTOR_ID as instruct4_5_2_, student1_.MEDICAL_TESTS as medical_1_5_2_, address2_.ID as id1_0_3_, address2_.CITY as city2_0_3_, address2_.COUNTRY as country3_0_3_, address2_.POSTAL_CODE as postal_c4_0_3_, address2_.STREET as street5_0_3_, flightinst3_.INSTRUCTOR_ID as person_i1_4_4_, flightinst3_1_.SSN as ssn2_4_4_, flightinst3_1_.ADDRESS_ID as address_5_4_4_, flightinst3_1_.FIRST_NAME as first_na3_4_4_, flightinst3_1_.SECOND_NAME as second_n4_4_4_, flightinst3_.LICENCE_NO as licence_1_2_4_, flightinst3_.VALID as valid2_2_4_ from flights flights0_ left outer join STUDENTS student1_ on flights0_.STUDENT_ID=student1_.STUDENT_ID left outer join PERSONS student1_1_ on student1_.STUDENT_ID=student1_1_.PERSON_ID left outer join ADDRESSES address2_ on student1_1_.ADDRESS_ID=address2_.ID left outer join FLIGHT_INSTRUCTORS flightinst3_ on student1_.INSTRUCTOR_ID=flightinst3_.INSTRUCTOR_ID left outer join PERSONS flightinst3_1_ on flightinst3_.INSTRUCTOR_ID=flightinst3_1_.PERSON_ID where flights0_.INSTRUCTOR_ID=?
[TRACE]  Starting root collection : model.Student.theoryClasses
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5a13fcf3]
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@250b5e5b]
[TRACE] Pushing collection reference to stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@4ef2ab73
[TRACE]  Registering AssociationKey : AssociationKey(table=STUDENTS_CLASSES, columns={STUDENT_ID}) -> null
[TRACE]  Starting collection element graph : model.Student.theoryClasses
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@34be065a
[TRACE] .. Registering AssociationKey : AssociationKey(table=STUDENTS_CLASSES, columns={CLASS_ID}) -> org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@34be065a
[TRACE] >> Starting entity identifier : model.TheoryClass
[DEBUG] Visiting attribute path : grade
[TRACE] >> Starting attribute Attribute(name=grade, type=integer [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=grade, type=integer [non-identifier])
[DEBUG] Visiting attribute path : hours
[TRACE] >> Starting attribute Attribute(name=hours, type=integer [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=hours, type=integer [non-identifier])
[DEBUG] Visiting attribute path : name
[TRACE] >> Starting attribute Attribute(name=name, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=name, type=string [non-identifier])
[DEBUG] Visiting attribute path : students
[DEBUG] Property path deemed to be circular : students
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@34be065a
[TRACE]  Finished collection element graph : model.Student.theoryClasses
[TRACE] Popped collection reference from stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@4ef2ab73
[TRACE]  Finished root collection : model.Student.theoryClasses
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(collection=model.Student.theoryClasses)
    - Returns
       - CollectionReturnImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:0>, path=[model.Student.theoryClasses])
          - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:1>, path=[model.Student.theoryClasses].<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=model.Student.theoryClasses)
          - SQL table alias mapping - theoryclas0_
          - alias suffix - 0_
          - suffixed key columns - {student_2_6_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - class_id1_7_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.TheoryClass)
                - SQL table alias mapping - theoryclas1_
                - alias suffix - 1_
                - suffixed key columns - {class_id1_7_1_}

[DEBUG] Static select for collection model.Student.theoryClasses: select theoryclas0_.STUDENT_ID as student_2_6_0_, theoryclas0_.CLASS_ID as class_id1_6_0_, theoryclas1_.CLASS_ID as class_id1_7_1_, theoryclas1_.GRADE as grade2_7_1_, theoryclas1_.HOURS as hours3_7_1_, theoryclas1_.NAME as name4_7_1_ from STUDENTS_CLASSES theoryclas0_ inner join TheoryClass theoryclas1_ on theoryclas0_.CLASS_ID=theoryclas1_.CLASS_ID where theoryclas0_.STUDENT_ID=?
[TRACE]  Starting root collection : model.Course.students
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@718f805a]
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@e09f1b6]
[TRACE] Pushing collection reference to stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@557b6a37
[TRACE]  Registering AssociationKey : AssociationKey(table=STUDENTS, columns={COURSE_ID}) -> null
[TRACE]  Starting collection element graph : model.Course.students
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@11b32a14
[TRACE] >> Starting entity identifier : model.Student
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[TRACE] >> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1c33e528]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5df63359
[TRACE] .... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5df63359
[TRACE] >>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : address.city
[TRACE] >>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.country
[TRACE] >>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.persons
[DEBUG] Property path deemed to be circular : address.persons
[DEBUG] Visiting attribute path : address.postalCode
[TRACE] >>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.street
[TRACE] >>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@5df63359
[TRACE] << Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : course
[DEBUG] Property path deemed to be circular : course
[DEBUG] Visiting attribute path : flights
[TRACE] >> Starting attribute Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@53d2d002]
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b39a3e6]
[TRACE] << Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5820070c]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@34208baa
[TRACE] .... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@34208baa
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[DEBUG] Property path deemed to be circular : instructor.address
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[TRACE] >>>> Starting attribute Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@71370fec]
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6707a4bf]
[TRACE] <<<< Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[DEBUG] Property path deemed to be circular : instructor.students
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@34208baa
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : medicalTests
[TRACE] >> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : theoryClasses
[TRACE] >> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@3fc7c734]
[DEBUG] Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@f0a66bd]
[TRACE] << Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@11b32a14
[TRACE]  Finished collection element graph : model.Course.students
[TRACE] Popped collection reference from stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@557b6a37
[TRACE]  Finished root collection : model.Course.students
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(collection=model.Course.students)
    - Returns
       - CollectionReturnImpl(collection=model.Course.students, querySpaceUid=<gen:0>, path=[model.Course.students])
          - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:1>, path=[model.Course.students].<elements>)
             - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:2>, path=[model.Course.students].<elements>.address)
             - CollectionAttributeFetchImpl(collection=model.Student.flights, querySpaceUid=<gen:3>, path=[model.Course.students].<elements>.flights)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:4>, path=[model.Course.students].<elements>.flights.<elements>)
             - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:5>, path=[model.Course.students].<elements>.instructor)
                - CollectionAttributeFetchImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:6>, path=[model.Course.students].<elements>.instructor.flights)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:7>, path=[model.Course.students].<elements>.instructor.flights.<elements>)
             - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:8>, path=[model.Course.students].<elements>.theoryClasses)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:9>, path=[model.Course.students].<elements>.theoryClasses.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=model.Course.students)
          - SQL table alias mapping - students0_
          - alias suffix - 0_
          - suffixed key columns - {course_i3_5_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - person_i1_4_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Student)
                - SQL table alias mapping - students0_
                - alias suffix - 1_
                - suffixed key columns - {person_i1_4_1_}
                - JOIN (JoinDefinedByMetadata(address)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.Address)
                      - SQL table alias mapping - address1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}
                - JOIN (JoinDefinedByMetadata(instructor)) : <gen:1> -> <gen:5>
                   - EntityQuerySpaceImpl(uid=<gen:5>, entity=model.FlightInstructor)
                      - SQL table alias mapping - flightinst2_
                      - alias suffix - 3_
                      - suffixed key columns - {person_i1_4_3_}

[DEBUG] Static select for collection model.Course.students: select students0_.COURSE_ID as course_i3_5_0_, students0_.STUDENT_ID as student_2_5_0_, students0_.STUDENT_ID as person_i1_4_1_, students0_1_.SSN as ssn2_4_1_, students0_1_.ADDRESS_ID as address_5_4_1_, students0_1_.FIRST_NAME as first_na3_4_1_, students0_1_.SECOND_NAME as second_n4_4_1_, students0_.COURSE_ID as course_i3_5_1_, students0_.INSTRUCTOR_ID as instruct4_5_1_, students0_.MEDICAL_TESTS as medical_1_5_1_, address1_.ID as id1_0_2_, address1_.CITY as city2_0_2_, address1_.COUNTRY as country3_0_2_, address1_.POSTAL_CODE as postal_c4_0_2_, address1_.STREET as street5_0_2_, flightinst2_.INSTRUCTOR_ID as person_i1_4_3_, flightinst2_1_.SSN as ssn2_4_3_, flightinst2_1_.ADDRESS_ID as address_5_4_3_, flightinst2_1_.FIRST_NAME as first_na3_4_3_, flightinst2_1_.SECOND_NAME as second_n4_4_3_, flightinst2_.LICENCE_NO as licence_1_2_3_, flightinst2_.VALID as valid2_2_3_ from STUDENTS students0_ inner join PERSONS students0_1_ on students0_.STUDENT_ID=students0_1_.PERSON_ID left outer join ADDRESSES address1_ on students0_1_.ADDRESS_ID=address1_.ID left outer join FLIGHT_INSTRUCTORS flightinst2_ on students0_.INSTRUCTOR_ID=flightinst2_.INSTRUCTOR_ID left outer join PERSONS flightinst2_1_ on flightinst2_.INSTRUCTOR_ID=flightinst2_1_.PERSON_ID where students0_.COURSE_ID=?
[TRACE]  Starting root collection : model.Address.persons
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@460b50df]
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1cf336fd]
[TRACE] Pushing collection reference to stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@1d0cac30
[TRACE]  Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> null
[TRACE]  Starting collection element graph : model.Address.persons
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@41ef1ea2
[TRACE] >> Starting entity identifier : model.Person
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[DEBUG] Property path deemed to be circular : address
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : flights
[DEBUG] Visiting attribute path : licenceNo
[TRACE] >> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : students
[TRACE] >> Starting attribute Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@5dfe23e8]
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@583fb274]
[TRACE] << Finishing up attribute : Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Visiting attribute path : valid
[TRACE] >> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[DEBUG] Visiting attribute path : course
[TRACE] >> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@202ae86f]
[TRACE] << Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1989e8c6]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@35c4697c
[TRACE] .... Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@35c4697c
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[DEBUG] Property path deemed to be circular : instructor.address
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[TRACE] >>>> Starting attribute Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@104dc1a2]
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@67d32a54]
[TRACE] <<<< Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.FlightInstructor.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[DEBUG] Property path deemed to be circular : instructor.students
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@35c4697c
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : medicalTests
[TRACE] >> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : theoryClasses
[TRACE] >> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:8> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@314a31b0]
[DEBUG] Adding QuerySpace : uid = <gen:9> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2753316c]
[TRACE] << Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@41ef1ea2
[TRACE]  Finished collection element graph : model.Address.persons
[TRACE] Popped collection reference from stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@1d0cac30
[TRACE]  Finished root collection : model.Address.persons
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(collection=model.Address.persons)
    - Returns
       - CollectionReturnImpl(collection=model.Address.persons, querySpaceUid=<gen:0>, path=[model.Address.persons])
          - (collection element) CollectionFetchableElementEntityGraph(entity=model.Person, querySpaceUid=<gen:1>, path=[model.Address.persons].<elements>)
             - CollectionAttributeFetchImpl(collection=model.FlightInstructor.students, querySpaceUid=<gen:2>, path=[model.Address.persons].<elements>.students)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:3>, path=[model.Address.persons].<elements>.students.<elements>)
             - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:4>, path=[model.Address.persons].<elements>.course)
             - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:5>, path=[model.Address.persons].<elements>.instructor)
                - CollectionAttributeFetchImpl(collection=model.FlightInstructor.flights, querySpaceUid=<gen:6>, path=[model.Address.persons].<elements>.instructor.flights)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:7>, path=[model.Address.persons].<elements>.instructor.flights.<elements>)
             - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:8>, path=[model.Address.persons].<elements>.theoryClasses)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:9>, path=[model.Address.persons].<elements>.theoryClasses.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=model.Address.persons)
          - SQL table alias mapping - persons0_
          - alias suffix - 0_
          - suffixed key columns - {address_5_4_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - person_i1_4_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Person)
                - SQL table alias mapping - persons0_
                - alias suffix - 1_
                - suffixed key columns - {person_i1_4_1_}
                - JOIN (JoinDefinedByMetadata(instructor)) : <gen:1> -> <gen:5>
                   - EntityQuerySpaceImpl(uid=<gen:5>, entity=model.FlightInstructor)
                      - SQL table alias mapping - flightinst1_
                      - alias suffix - 2_
                      - suffixed key columns - {person_i1_4_2_}

[DEBUG] Static select for collection model.Address.persons: select persons0_.ADDRESS_ID as address_5_4_0_, persons0_.PERSON_ID as person_i1_4_0_, persons0_.PERSON_ID as person_i1_4_1_, persons0_.SSN as ssn2_4_1_, persons0_.ADDRESS_ID as address_5_4_1_, persons0_.FIRST_NAME as first_na3_4_1_, persons0_.SECOND_NAME as second_n4_4_1_, persons0_1_.COURSE_ID as course_i3_5_1_, persons0_1_.INSTRUCTOR_ID as instruct4_5_1_, persons0_1_.MEDICAL_TESTS as medical_1_5_1_, persons0_2_.LICENCE_NO as licence_1_2_1_, persons0_2_.VALID as valid2_2_1_, case when persons0_1_.STUDENT_ID is not null then 1 when persons0_2_.INSTRUCTOR_ID is not null then 2 when persons0_.PERSON_ID is not null then 0 end as clazz_1_, flightinst1_.INSTRUCTOR_ID as person_i1_4_2_, flightinst1_1_.SSN as ssn2_4_2_, flightinst1_1_.ADDRESS_ID as address_5_4_2_, flightinst1_1_.FIRST_NAME as first_na3_4_2_, flightinst1_1_.SECOND_NAME as second_n4_4_2_, flightinst1_.LICENCE_NO as licence_1_2_2_, flightinst1_.VALID as valid2_2_2_ from PERSONS persons0_ left outer join STUDENTS persons0_1_ on persons0_.PERSON_ID=persons0_1_.STUDENT_ID left outer join FLIGHT_INSTRUCTORS persons0_2_ on persons0_.PERSON_ID=persons0_2_.INSTRUCTOR_ID left outer join FLIGHT_INSTRUCTORS flightinst1_ on persons0_1_.INSTRUCTOR_ID=flightinst1_.INSTRUCTOR_ID left outer join PERSONS flightinst1_1_ on flightinst1_.INSTRUCTOR_ID=flightinst1_1_.PERSON_ID where persons0_.ADDRESS_ID=?
[TRACE]  Starting root collection : model.Student.flights
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@59edb4f5]
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2792b416]
[TRACE] Pushing collection reference to stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@4735d6e5
[TRACE]  Registering AssociationKey : AssociationKey(table=flights, columns={STUDENT_ID}) -> null
[TRACE]  Starting collection element graph : model.Student.flights
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@79d3473e
[TRACE] >> Starting entity identifier : model.Flight
[DEBUG] Visiting attribute path : date
[TRACE] >> Starting attribute Attribute(name=date, type=LocalDate [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=date, type=LocalDate [non-identifier])
[DEBUG] Visiting attribute path : description
[TRACE] >> Starting attribute Attribute(name=description, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=description, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor
[TRACE] >> Starting attribute Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4dad0eed]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@7fad214a
[TRACE] .... Registering AssociationKey : AssociationKey(table=flights, columns={INSTRUCTOR_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@7fad214a
[TRACE] >>>> Starting entity identifier : model.FlightInstructor
[DEBUG] Visiting attribute path : instructor.SSN
[TRACE] >>>> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : instructor.address
[TRACE] >>>> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@164642a4]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@75cf0de5
[TRACE] ...... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@75cf0de5
[TRACE] >>>>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : instructor.address.city
[TRACE] >>>>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.address.country
[TRACE] >>>>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.address.persons
[DEBUG] Property path deemed to be circular : instructor.address.persons
[DEBUG] Visiting attribute path : instructor.address.postalCode
[TRACE] >>>>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.address.street
[TRACE] >>>>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@75cf0de5
[TRACE] <<<< Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.firstName
[TRACE] >>>> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.secondName
[TRACE] >>>> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : instructor.flights
[DEBUG] Property path deemed to be circular : instructor.flights
[DEBUG] Visiting attribute path : instructor.licenceNo
[TRACE] >>>> Starting attribute Attribute(name=licenceNo, type=long [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=licenceNo, type=long [non-identifier])
[DEBUG] Visiting attribute path : instructor.students
[TRACE] >>>> Starting attribute Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@50b0afd7]
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@468173fa]
[TRACE] <<<< Finishing up attribute : Attribute(name=students, type=java.util.Set(model.FlightInstructor.students) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor.valid
[TRACE] >>>> Starting attribute Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=valid, type=converted::goodies.BooleanConverter [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@7fad214a
[TRACE] << Finishing up attribute : Attribute(name=instructor, type=model.FlightInstructor [non-identifier,association])
[DEBUG] Visiting attribute path : student
[DEBUG] Property path deemed to be circular : student
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@79d3473e
[TRACE]  Finished collection element graph : model.Student.flights
[TRACE] Popped collection reference from stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@4735d6e5
[TRACE]  Finished root collection : model.Student.flights
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(collection=model.Student.flights)
    - Returns
       - CollectionReturnImpl(collection=model.Student.flights, querySpaceUid=<gen:0>, path=[model.Student.flights])
          - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:1>, path=[model.Student.flights].<elements>)
             - EntityAttributeFetchImpl(entity=model.FlightInstructor, querySpaceUid=<gen:2>, path=[model.Student.flights].<elements>.instructor)
                - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:3>, path=[model.Student.flights].<elements>.instructor.address)
                - CollectionAttributeFetchImpl(collection=model.FlightInstructor.students, querySpaceUid=<gen:4>, path=[model.Student.flights].<elements>.instructor.students)
                   - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:5>, path=[model.Student.flights].<elements>.instructor.students.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=model.Student.flights)
          - SQL table alias mapping - flights0_
          - alias suffix - 0_
          - suffixed key columns - {student_5_3_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - flight_i1_3_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Flight)
                - SQL table alias mapping - flights0_
                - alias suffix - 1_
                - suffixed key columns - {flight_i1_3_1_}
                - JOIN (JoinDefinedByMetadata(instructor)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.FlightInstructor)
                      - SQL table alias mapping - flightinst1_
                      - alias suffix - 2_
                      - suffixed key columns - {person_i1_4_2_}
                      - JOIN (JoinDefinedByMetadata(address)) : <gen:2> -> <gen:3>
                         - EntityQuerySpaceImpl(uid=<gen:3>, entity=model.Address)
                            - SQL table alias mapping - address2_
                            - alias suffix - 3_
                            - suffixed key columns - {id1_0_3_}

[DEBUG] Static select for collection model.Student.flights: select flights0_.STUDENT_ID as student_5_3_0_, flights0_.flight_id as flight_i1_3_0_, flights0_.flight_id as flight_i1_3_1_, flights0_.DATE as date2_3_1_, flights0_.DESCRIPTION as descript3_3_1_, flights0_.INSTRUCTOR_ID as instruct4_3_1_, flights0_.STUDENT_ID as student_5_3_1_, flightinst1_.INSTRUCTOR_ID as person_i1_4_2_, flightinst1_1_.SSN as ssn2_4_2_, flightinst1_1_.ADDRESS_ID as address_5_4_2_, flightinst1_1_.FIRST_NAME as first_na3_4_2_, flightinst1_1_.SECOND_NAME as second_n4_4_2_, flightinst1_.LICENCE_NO as licence_1_2_2_, flightinst1_.VALID as valid2_2_2_, address2_.ID as id1_0_3_, address2_.CITY as city2_0_3_, address2_.COUNTRY as country3_0_3_, address2_.POSTAL_CODE as postal_c4_0_3_, address2_.STREET as street5_0_3_ from flights flights0_ left outer join FLIGHT_INSTRUCTORS flightinst1_ on flights0_.INSTRUCTOR_ID=flightinst1_.INSTRUCTOR_ID left outer join PERSONS flightinst1_1_ on flightinst1_.INSTRUCTOR_ID=flightinst1_1_.PERSON_ID left outer join ADDRESSES address2_ on flightinst1_1_.ADDRESS_ID=address2_.ID where flights0_.STUDENT_ID=?
[TRACE]  Starting root collection : model.FlightInstructor.students
[DEBUG] Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@62765aec]
[DEBUG] Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6f5bd362]
[TRACE] Pushing collection reference to stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@3a401749
[TRACE]  Registering AssociationKey : AssociationKey(table=STUDENTS, columns={INSTRUCTOR_ID}) -> null
[TRACE]  Starting collection element graph : model.FlightInstructor.students
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@7793ad58
[TRACE] >> Starting entity identifier : model.Student
[DEBUG] Visiting attribute path : SSN
[TRACE] >> Starting attribute Attribute(name=SSN, type=double [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=SSN, type=double [non-identifier])
[DEBUG] Visiting attribute path : address
[TRACE] >> Starting attribute Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@27e2287c]
[TRACE] Pushing fetch source to stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@16132f21
[TRACE] .... Registering AssociationKey : AssociationKey(table=PERSONS, columns={ADDRESS_ID}) -> org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@16132f21
[TRACE] >>>> Starting entity identifier : model.Address
[DEBUG] Visiting attribute path : address.city
[TRACE] >>>> Starting attribute Attribute(name=city, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=city, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.country
[TRACE] >>>> Starting attribute Attribute(name=country, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=country, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.persons
[DEBUG] Property path deemed to be circular : address.persons
[DEBUG] Visiting attribute path : address.postalCode
[TRACE] >>>> Starting attribute Attribute(name=postalCode, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=postalCode, type=string [non-identifier])
[DEBUG] Visiting attribute path : address.street
[TRACE] >>>> Starting attribute Attribute(name=street, type=string [non-identifier])
[TRACE] <<<< Finishing up attribute : Attribute(name=street, type=string [non-identifier])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.EntityAttributeFetchImpl@16132f21
[TRACE] << Finishing up attribute : Attribute(name=address, type=model.Address [non-identifier,association])
[DEBUG] Visiting attribute path : firstName
[TRACE] >> Starting attribute Attribute(name=firstName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=firstName, type=string [non-identifier])
[DEBUG] Visiting attribute path : secondName
[TRACE] >> Starting attribute Attribute(name=secondName, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=secondName, type=string [non-identifier])
[DEBUG] Visiting attribute path : course
[TRACE] >> Starting attribute Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:3> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cd388f5]
[TRACE] << Finishing up attribute : Attribute(name=course, type=model.Course [non-identifier,association])
[DEBUG] Visiting attribute path : flights
[TRACE] >> Starting attribute Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:4> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@4640195a]
[DEBUG] Adding QuerySpace : uid = <gen:5> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@70d77826]
[TRACE] << Finishing up attribute : Attribute(name=flights, type=java.util.Set(model.Student.flights) [non-identifier,association])
[DEBUG] Visiting attribute path : instructor
[DEBUG] Property path deemed to be circular : instructor
[DEBUG] Visiting attribute path : medicalTests
[TRACE] >> Starting attribute Attribute(name=medicalTests, type=string [non-identifier])
[TRACE] << Finishing up attribute : Attribute(name=medicalTests, type=string [non-identifier])
[DEBUG] Visiting attribute path : theoryClasses
[TRACE] >> Starting attribute Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[DEBUG] Adding QuerySpace : uid = <gen:6> -> org.hibernate.loader.plan.build.internal.spaces.CollectionQuerySpaceImpl@7f323b3a]
[DEBUG] Adding QuerySpace : uid = <gen:7> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4f169009]
[TRACE] << Finishing up attribute : Attribute(name=theoryClasses, type=java.util.Set(model.Student.theoryClasses) [non-identifier,association])
[TRACE] Popped fetch owner from stack : org.hibernate.loader.plan.build.internal.returns.CollectionFetchableElementEntityGraph@7793ad58
[TRACE]  Finished collection element graph : model.FlightInstructor.students
[TRACE] Popped collection reference from stack : org.hibernate.loader.plan.build.internal.returns.CollectionReturnImpl@3a401749
[TRACE]  Finished root collection : model.FlightInstructor.students
[DEBUG] Building LoadPlan...
[DEBUG] processing queryspace <gen:0>
[DEBUG] LoadPlan(collection=model.FlightInstructor.students)
    - Returns
       - CollectionReturnImpl(collection=model.FlightInstructor.students, querySpaceUid=<gen:0>, path=[model.FlightInstructor.students])
          - (collection element) CollectionFetchableElementEntityGraph(entity=model.Student, querySpaceUid=<gen:1>, path=[model.FlightInstructor.students].<elements>)
             - EntityAttributeFetchImpl(entity=model.Address, querySpaceUid=<gen:2>, path=[model.FlightInstructor.students].<elements>.address)
             - EntityAttributeFetchImpl(entity=model.Course, querySpaceUid=<gen:3>, path=[model.FlightInstructor.students].<elements>.course)
             - CollectionAttributeFetchImpl(collection=model.Student.flights, querySpaceUid=<gen:4>, path=[model.FlightInstructor.students].<elements>.flights)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.Flight, querySpaceUid=<gen:5>, path=[model.FlightInstructor.students].<elements>.flights.<elements>)
             - CollectionAttributeFetchImpl(collection=model.Student.theoryClasses, querySpaceUid=<gen:6>, path=[model.FlightInstructor.students].<elements>.theoryClasses)
                - (collection element) CollectionFetchableElementEntityGraph(entity=model.TheoryClass, querySpaceUid=<gen:7>, path=[model.FlightInstructor.students].<elements>.theoryClasses.<elements>)
    - QuerySpaces
       - CollectionQuerySpaceImpl(uid=<gen:0>, collection=model.FlightInstructor.students)
          - SQL table alias mapping - students0_
          - alias suffix - 0_
          - suffixed key columns - {instruct4_5_0_}
          - entity-element alias suffix - 1_
          - 1_entity-element suffixed key columns - person_i1_4_1_
          - JOIN (JoinDefinedByMetadata(elements)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.Student)
                - SQL table alias mapping - students0_
                - alias suffix - 1_
                - suffixed key columns - {person_i1_4_1_}
                - JOIN (JoinDefinedByMetadata(address)) : <gen:1> -> <gen:2>
                   - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.Address)
                      - SQL table alias mapping - address1_
                      - alias suffix - 2_
                      - suffixed key columns - {id1_0_2_}

[DEBUG] Static select for collection model.FlightInstructor.students: select students0_.INSTRUCTOR_ID as instruct4_5_0_, students0_.STUDENT_ID as student_2_5_0_, students0_.STUDENT_ID as person_i1_4_1_, students0_1_.SSN as ssn2_4_1_, students0_1_.ADDRESS_ID as address_5_4_1_, students0_1_.FIRST_NAME as first_na3_4_1_, students0_1_.SECOND_NAME as second_n4_4_1_, students0_.COURSE_ID as course_i3_5_1_, students0_.INSTRUCTOR_ID as instruct4_5_1_, students0_.MEDICAL_TESTS as medical_1_5_1_, address1_.ID as id1_0_2_, address1_.CITY as city2_0_2_, address1_.COUNTRY as country3_0_2_, address1_.POSTAL_CODE as postal_c4_0_2_, address1_.STREET as street5_0_2_ from STUDENTS students0_ inner join PERSONS students0_1_ on students0_.STUDENT_ID=students0_1_.PERSON_ID left outer join ADDRESSES address1_ on students0_1_.ADDRESS_ID=address1_.ID where students0_.INSTRUCTOR_ID=?
[TRACE] Wrapping up metadata context...
[TRACE] Starting entity [model.Course]
[TRACE] Building identifier attribute [Course.id]
[TRACE] Starting attribute metadata determination [id]
[TRACE]     Determined member [private int model.Course.id]
[TRACE]     Determined type [name=integer, class=org.hibernate.type.IntegerType]
[TRACE] Building attribute [Course.certType]
[TRACE] Starting attribute metadata determination [certType]
[TRACE]     Determined member [private model.Course$CertificationType model.Course.certType]
[TRACE]     Determined type [name=org.hibernate.type.EnumType, class=org.hibernate.type.CustomType]
[TRACE] Building attribute [Course.description]
[TRACE] Starting attribute metadata determination [description]
[TRACE]     Determined member [private java.lang.String model.Course.description]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Building attribute [Course.endDate]
[TRACE] Starting attribute metadata determination [endDate]
[TRACE]     Determined member [private java.time.LocalDate model.Course.endDate]
[TRACE]     Determined type [name=LocalDate, class=org.hibernate.type.LocalDateType]
[TRACE] Building attribute [Course.startDate]
[TRACE] Starting attribute metadata determination [startDate]
[TRACE]     Determined member [private java.time.LocalDate model.Course.startDate]
[TRACE]     Determined type [name=LocalDate, class=org.hibernate.type.LocalDateType]
[TRACE] Building attribute [Course.students]
[TRACE] Starting attribute metadata determination [students]
[TRACE]     Determined member [private java.util.Set model.Course.students]
[TRACE]     Determined type [name=java.util.Set(model.Course.students), class=org.hibernate.type.SetType]
[TRACE] Completed entity [model.Course]
[TRACE] Starting entity [model.Flight]
[TRACE] Building identifier attribute [Flight.id]
[TRACE] Starting attribute metadata determination [id]
[TRACE]     Determined member [private int model.Flight.id]
[TRACE]     Determined type [name=integer, class=org.hibernate.type.IntegerType]
[TRACE] Building attribute [Flight.date]
[TRACE] Starting attribute metadata determination [date]
[TRACE]     Determined member [private java.time.LocalDate model.Flight.date]
[TRACE]     Determined type [name=LocalDate, class=org.hibernate.type.LocalDateType]
[TRACE] Building attribute [Flight.description]
[TRACE] Starting attribute metadata determination [description]
[TRACE]     Determined member [private java.lang.String model.Flight.description]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Building attribute [Flight.instructor]
[TRACE] Starting attribute metadata determination [instructor]
[TRACE]     Determined member [private model.FlightInstructor model.Flight.instructor]
[TRACE]     Determined type [name=model.FlightInstructor, class=org.hibernate.type.ManyToOneType]
[TRACE] Building attribute [Flight.student]
[TRACE] Starting attribute metadata determination [student]
[TRACE]     Determined member [private model.Student model.Flight.student]
[TRACE]     Determined type [name=model.Student, class=org.hibernate.type.ManyToOneType]
[TRACE] Completed entity [model.Flight]
[TRACE] Starting entity [model.Person]
[TRACE] Building identifier attribute [Person.id]
[TRACE] Starting attribute metadata determination [id]
[TRACE]     Determined member [private int model.Person.id]
[TRACE]     Determined type [name=integer, class=org.hibernate.type.IntegerType]
[TRACE] Building attribute [Person.SSN]
[TRACE] Starting attribute metadata determination [SSN]
[TRACE]     Determined member [private java.lang.Double model.Person.SSN]
[TRACE]     Determined type [name=double, class=org.hibernate.type.DoubleType]
[TRACE] Building attribute [Person.address]
[TRACE] Starting attribute metadata determination [address]
[TRACE]     Determined member [private model.Address model.Person.address]
[TRACE]     Determined type [name=model.Address, class=org.hibernate.type.ManyToOneType]
[TRACE] Building attribute [Person.firstName]
[TRACE] Starting attribute metadata determination [firstName]
[TRACE]     Determined member [private java.lang.String model.Person.firstName]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Building attribute [Person.secondName]
[TRACE] Starting attribute metadata determination [secondName]
[TRACE]     Determined member [private java.lang.String model.Person.secondName]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Completed entity [model.Person]
[TRACE] Starting entity [model.Address]
[TRACE] Building identifier attribute [Address.id]
[TRACE] Starting attribute metadata determination [id]
[TRACE]     Determined member [private int model.Address.id]
[TRACE]     Determined type [name=integer, class=org.hibernate.type.IntegerType]
[TRACE] Building attribute [Address.city]
[TRACE] Starting attribute metadata determination [city]
[TRACE]     Determined member [private java.lang.String model.Address.city]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Building attribute [Address.country]
[TRACE] Starting attribute metadata determination [country]
[TRACE]     Determined member [private java.lang.String model.Address.country]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Building attribute [Address.persons]
[TRACE] Starting attribute metadata determination [persons]
[TRACE]     Determined member [private java.util.Set model.Address.persons]
[TRACE]     Determined type [name=java.util.Set(model.Address.persons), class=org.hibernate.type.SetType]
[TRACE] Building attribute [Address.postalCode]
[TRACE] Starting attribute metadata determination [postalCode]
[TRACE]     Determined member [private java.lang.String model.Address.postalCode]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Building attribute [Address.street]
[TRACE] Starting attribute metadata determination [street]
[TRACE]     Determined member [private java.lang.String model.Address.street]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Completed entity [model.Address]
[TRACE] Starting entity [model.FlightInstructor]
[TRACE] Building attribute [FlightInstructor.flights]
[TRACE] Starting attribute metadata determination [flights]
[TRACE]     Determined member [private java.util.Set model.FlightInstructor.flights]
[TRACE]     Determined type [name=java.util.Set(model.FlightInstructor.flights), class=org.hibernate.type.SetType]
[TRACE] Building attribute [FlightInstructor.licenceNo]
[TRACE] Starting attribute metadata determination [licenceNo]
[TRACE]     Determined member [private java.lang.Long model.FlightInstructor.licenceNo]
[TRACE]     Determined type [name=long, class=org.hibernate.type.LongType]
[TRACE] Building attribute [FlightInstructor.students]
[TRACE] Starting attribute metadata determination [students]
[TRACE]     Determined member [private java.util.Set model.FlightInstructor.students]
[TRACE]     Determined type [name=java.util.Set(model.FlightInstructor.students), class=org.hibernate.type.SetType]
[TRACE] Building attribute [FlightInstructor.valid]
[TRACE] Starting attribute metadata determination [valid]
[TRACE]     Determined member [private java.lang.Boolean model.FlightInstructor.valid]
[TRACE]     Determined type [name=converted::goodies.BooleanConverter, class=org.hibernate.type.descriptor.converter.AttributeConverterTypeAdapter]
[TRACE] Completed entity [model.FlightInstructor]
[TRACE] Starting entity [model.Student]
[TRACE] Building attribute [Student.course]
[TRACE] Starting attribute metadata determination [course]
[TRACE]     Determined member [model.Course model.Student.course]
[TRACE]     Determined type [name=model.Course, class=org.hibernate.type.ManyToOneType]
[TRACE] Building attribute [Student.flights]
[TRACE] Starting attribute metadata determination [flights]
[TRACE]     Determined member [java.util.Set model.Student.flights]
[TRACE]     Determined type [name=java.util.Set(model.Student.flights), class=org.hibernate.type.SetType]
[TRACE] Building attribute [Student.instructor]
[TRACE] Starting attribute metadata determination [instructor]
[TRACE]     Determined member [model.FlightInstructor model.Student.instructor]
[TRACE]     Determined type [name=model.FlightInstructor, class=org.hibernate.type.ManyToOneType]
[TRACE] Building attribute [Student.medicalTests]
[TRACE] Starting attribute metadata determination [medicalTests]
[TRACE]     Determined member [java.lang.String model.Student.medicalTests]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Building attribute [Student.theoryClasses]
[TRACE] Starting attribute metadata determination [theoryClasses]
[TRACE]     Determined member [java.util.Set model.Student.theoryClasses]
[TRACE]     Determined type [name=java.util.Set(model.Student.theoryClasses), class=org.hibernate.type.SetType]
[TRACE] Completed entity [model.Student]
[TRACE] Starting entity [model.TheoryClass]
[TRACE] Building identifier attribute [TheoryClass.id]
[TRACE] Starting attribute metadata determination [id]
[TRACE]     Determined member [private int model.TheoryClass.id]
[TRACE]     Determined type [name=integer, class=org.hibernate.type.IntegerType]
[TRACE] Building attribute [TheoryClass.grade]
[TRACE] Starting attribute metadata determination [grade]
[TRACE]     Determined member [private int model.TheoryClass.grade]
[TRACE]     Determined type [name=integer, class=org.hibernate.type.IntegerType]
[TRACE] Building attribute [TheoryClass.hours]
[TRACE] Starting attribute metadata determination [hours]
[TRACE]     Determined member [private int model.TheoryClass.hours]
[TRACE]     Determined type [name=integer, class=org.hibernate.type.IntegerType]
[TRACE] Building attribute [TheoryClass.name]
[TRACE] Starting attribute metadata determination [name]
[TRACE]     Determined member [private java.lang.String model.TheoryClass.name]
[TRACE]     Determined type [name=string, class=org.hibernate.type.StringType]
[TRACE] Building attribute [TheoryClass.students]
[TRACE] Starting attribute metadata determination [students]
[TRACE]     Determined member [private java.util.Set model.TheoryClass.students]
[TRACE]     Determined type [name=java.util.Set(model.TheoryClass.students), class=org.hibernate.type.SetType]
[TRACE] Completed entity [model.TheoryClass]
[TRACE] Normalizing identifier quoting [HT_PERSONS]
[TRACE] Normalizing identifier quoting [HT_FLIGHT_INSTRUCTORS]
[TRACE] Normalizing identifier quoting [HT_STUDENTS]
[TRACE] Initializing service [role=org.hibernate.tool.schema.spi.SchemaManagementTool]
[TRACE] Initializing service [role=org.hibernate.tool.hbm2ddl.ImportSqlCommandExtractor]
[INFO ] HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@1039bfc4] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
[INFO ] HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@750f64fe] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
[TRACE] Initializing service [role=org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform]
[DEBUG] No JtaPlatform was specified, checking resolver
[TRACE] Initializing service [role=org.hibernate.engine.transaction.jta.platform.spi.JtaPlatformResolver]
[DEBUG] No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
[DEBUG] Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
[INFO ] HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
[DEBUG] Checking 0 named HQL queries
[DEBUG] Checking 0 named SQL queries
[DEBUG] Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@71e7adbb
[TRACE] Initializing service [role=org.hibernate.engine.jndi.spi.JndiService]
[DEBUG] Registering SessionFactory: 70dcd297-efab-4e51-a2a8-7476522c5e09 (<unnamed>)
[DEBUG] Not binding SessionFactory to JNDI, no JNDI name configured
[TRACE] Opening Hibernate Session.  tenant=null
[TRACE] Initializing service [role=org.hibernate.stat.spi.StatisticsImplementor]
[DEBUG] Statistics initialized [enabled=false]
[TRACE] Initializing service [role=org.hibernate.jmx.spi.JmxService]
[TRACE] Opened Session [755d991f-8292-4526-9d09-596f0779ae41] at timestamp: 1605133434215
[DEBUG] On TransactionImpl creation, JpaCompliance#isJpaTransactionComplianceEnabled == false
[DEBUG] begin
[TRACE] Preparing to begin transaction via JDBC Connection.setAutoCommit(false)
[TRACE] Transaction begun via JDBC Connection.setAutoCommit(false)
[TRACE] ResourceLocalTransactionCoordinatorImpl#afterBeginCallback
[DEBUG] committing
[TRACE] ResourceLocalTransactionCoordinatorImpl#beforeCompletionCallback
[TRACE] SessionImpl#beforeTransactionCompletion()
[TRACE] Automatically flushing session
[TRACE] LogicalConnection#beforeTransactionCompletion
[TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsBeforeTransactionCompletion
[TRACE] Preparing to commit transaction via JDBC Connection.commit()
[TRACE] Transaction committed via JDBC Connection.commit()
[TRACE] LogicalConnection#afterTransaction
[TRACE] Releasing JDBC resources
[DEBUG] Initiating JDBC connection release from afterTransaction
[TRACE] Releasing JDBC resources
[TRACE] ResourceLocalTransactionCoordinatorImpl#afterCompletionCallback(true)
[TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsAfterTransactionCompletion(3)
[TRACE] LogicalConnection#afterTransaction
[TRACE] Releasing JDBC resources
[DEBUG] Initiating JDBC connection release from afterTransaction
[TRACE] SessionImpl#afterTransactionCompletion(successful=true, delayed=false)
[DEBUG] begin
[TRACE] Preparing to begin transaction via JDBC Connection.setAutoCommit(false)
[TRACE] Transaction begun via JDBC Connection.setAutoCommit(false)
[TRACE] ResourceLocalTransactionCoordinatorImpl#afterBeginCallback
[TRACE] Saving transient instance
[TRACE] Saving [model.FlightInstructor#<null>]
[TRACE] Processing cascade ACTION_SAVE_UPDATE for: model.FlightInstructor
[TRACE] Done processing cascade ACTION_SAVE_UPDATE for: model.FlightInstructor
[TRACE] Wrapped collection in role: model.FlightInstructor.flights
[TRACE] Wrapped collection in role: model.FlightInstructor.students
[TRACE] Adding an EntityIdentityInsertAction for [model.FlightInstructor] object
[TRACE] Executing inserts before finding non-nullable transient entities for early insert: [EntityIdentityInsertAction[model.FlightInstructor#<null>]]
[TRACE] Adding insert with no non-nullable, transient entities: [EntityIdentityInsertAction[model.FlightInstructor#<null>]]
[TRACE] Executing insertions before resolved early-insert
[DEBUG] Executing identity-insert immediately
[TRACE] Inserting entity: model.FlightInstructor (native id)
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@531ec978 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@4ed35861: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME) values (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)]]
[TRACE] Dehydrating entity: [model.FlightInstructor#<null>]
[DEBUG] Natively generated identity: 1
[TRACE] Releasing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@498a612d [wrapping: com.mysql.jdbc.JDBC4ResultSet@88b76f2]]
[TRACE] Closing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@498a612d [wrapping: com.mysql.jdbc.JDBC4ResultSet@88b76f2]]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@531ec978 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@4ed35861: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME) values (null, null, 'Ismoil', 'Atajanov')]]
[DEBUG] HHH000387: ResultSet's statement was not registered
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@531ec978 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@4ed35861: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME) values (null, null, 'Ismoil', 'Atajanov')]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Inserting entity: [model.FlightInstructor#1]
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@7e5b621b [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@48a873b6: insert into FLIGHT_INSTRUCTORS (LICENCE_NO, VALID, INSTRUCTOR_ID) values (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)]]
[TRACE] Dehydrating entity: [model.FlightInstructor#1]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@7e5b621b [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@48a873b6: insert into FLIGHT_INSTRUCTORS (LICENCE_NO, VALID, INSTRUCTOR_ID) values (54313, 'Y', 1)]]
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@7e5b621b [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@48a873b6: insert into FLIGHT_INSTRUCTORS (LICENCE_NO, VALID, INSTRUCTOR_ID) values (54313, 'Y', 1)]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Processing cascade ACTION_SAVE_UPDATE for: model.FlightInstructor
[TRACE] Cascade ACTION_SAVE_UPDATE for collection: model.FlightInstructor.flights
[TRACE] Cascading to save or update: model.Flight
[TRACE] ID unsaved-value strategy UNDEFINED
[TRACE] Getting current persistent state for: [model.Flight#0]
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@2be818da [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@52f5677a: select flight_.flight_id, flight_.DATE as date2_3_, flight_.DESCRIPTION as descript3_3_, flight_.INSTRUCTOR_ID as instruct4_3_, flight_.STUDENT_ID as student_5_3_ from flights flight_ where flight_.flight_id=** NOT SPECIFIED **]]
[TRACE] Registering result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@5e7abaf7 [wrapping: com.mysql.jdbc.JDBC4ResultSet@46320c9a]]
[TRACE] Releasing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@5e7abaf7 [wrapping: com.mysql.jdbc.JDBC4ResultSet@46320c9a]]
[TRACE] Closing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@5e7abaf7 [wrapping: com.mysql.jdbc.JDBC4ResultSet@46320c9a]]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@2be818da [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@52f5677a: select flight_.flight_id, flight_.DATE as date2_3_, flight_.DESCRIPTION as descript3_3_, flight_.INSTRUCTOR_ID as instruct4_3_, flight_.STUDENT_ID as student_5_3_ from flights flight_ where flight_.flight_id=0]]
[DEBUG] HHH000387: ResultSet's statement was not registered
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@2be818da [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@52f5677a: select flight_.flight_id, flight_.DATE as date2_3_, flight_.DESCRIPTION as descript3_3_, flight_.INSTRUCTOR_ID as instruct4_3_, flight_.STUDENT_ID as student_5_3_ from flights flight_ where flight_.flight_id=0]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Transient instance of: model.Flight
[TRACE] Saving transient instance
[DEBUG] Generated identifier: 0, using strategy: org.hibernate.id.Assigned
[TRACE] Saving [model.Flight#0]
[TRACE] Adding an EntityInsertAction for [model.Flight] object
[TRACE] ID unsaved-value: 0
[TRACE] Adding insert with non-nullable, transient entities; insert=[EntityInsertAction[model.Flight#0]], dependencies=[NonNullableTransientDependencies[transientEntityName=model.Student requiredBy=[student]]]
[TRACE] Adding insert with non-nullable, transient entities; insert=[EntityInsertAction[model.Flight#0]], dependencies=[NonNullableTransientDependencies[transientEntityName=model.Student requiredBy=[student]]]
[TRACE] Done cascade ACTION_SAVE_UPDATE for collection: model.FlightInstructor.flights
[TRACE] Cascade ACTION_SAVE_UPDATE for collection: model.FlightInstructor.students
[TRACE] Cascading to save or update: model.Student
[TRACE] ID unsaved-value: 0
[TRACE] Transient instance of: model.Student
[TRACE] Saving transient instance
[TRACE] Saving [model.Student#<null>]
[TRACE] Processing cascade ACTION_SAVE_UPDATE for: model.Student
[TRACE] Cascading to save or update: model.Address
[TRACE] ID unsaved-value: 0
[TRACE] Transient instance of: model.Address
[TRACE] Saving transient instance
[TRACE] Saving [model.Address#<null>]
[TRACE] Wrapped collection in role: model.Address.persons
[TRACE] Adding an EntityIdentityInsertAction for [model.Address] object
[TRACE] Executing inserts before finding non-nullable transient entities for early insert: [EntityIdentityInsertAction[model.Address#<null>]]
[TRACE] Adding insert with no non-nullable, transient entities: [EntityIdentityInsertAction[model.Address#<null>]]
[TRACE] Executing insertions before resolved early-insert
[DEBUG] Executing identity-insert immediately
[TRACE] Inserting entity: model.Address (native id)
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@6c33da7a [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@5de7124e: insert into ADDRESSES (CITY, COUNTRY, POSTAL_CODE, STREET) values (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)]]
[TRACE] Dehydrating entity: [model.Address#<null>]
[DEBUG] Natively generated identity: 1
[TRACE] Releasing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@15986dd5 [wrapping: com.mysql.jdbc.JDBC4ResultSet@69aabcb0]]
[TRACE] Closing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@15986dd5 [wrapping: com.mysql.jdbc.JDBC4ResultSet@69aabcb0]]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@6c33da7a [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@5de7124e: insert into ADDRESSES (CITY, COUNTRY, POSTAL_CODE, STREET) values (null, 'POLAND', null, null)]]
[DEBUG] HHH000387: ResultSet's statement was not registered
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@6c33da7a [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@5de7124e: insert into ADDRESSES (CITY, COUNTRY, POSTAL_CODE, STREET) values (null, 'POLAND', null, null)]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] No unresolved entity inserts that depended on [[model.Address#1]]
[TRACE] Done processing cascade ACTION_SAVE_UPDATE for: model.Student
[TRACE] Adding an EntityIdentityInsertAction for [model.Student] object
[TRACE] Executing inserts before finding non-nullable transient entities for early insert: [EntityIdentityInsertAction[model.Student#<null>]]
[TRACE] Adding insert with no non-nullable, transient entities: [EntityIdentityInsertAction[model.Student#<null>]]
[TRACE] Executing insertions before resolved early-insert
[DEBUG] Executing identity-insert immediately
[TRACE] ID unsaved-value strategy UNDEFINED
[TRACE] Getting current persistent state for: [model.Course#0]
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@5d352de0 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@429eaf55: select course_.course_id, course_.CERT_TYPE as cert_typ2_1_, course_.DESCRIPTION as descript3_1_, course_.END_DATE as end_date4_1_, course_.START_DATE as start_da5_1_ from COURSES course_ where course_.course_id=** NOT SPECIFIED **]]
[TRACE] Registering result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@59d0cdb6 [wrapping: com.mysql.jdbc.JDBC4ResultSet@6e243175]]
[TRACE] Releasing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@59d0cdb6 [wrapping: com.mysql.jdbc.JDBC4ResultSet@6e243175]]
[TRACE] Closing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@59d0cdb6 [wrapping: com.mysql.jdbc.JDBC4ResultSet@6e243175]]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@5d352de0 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@429eaf55: select course_.course_id, course_.CERT_TYPE as cert_typ2_1_, course_.DESCRIPTION as descript3_1_, course_.END_DATE as end_date4_1_, course_.START_DATE as start_da5_1_ from COURSES course_ where course_.course_id=0]]
[DEBUG] HHH000387: ResultSet's statement was not registered
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@5d352de0 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@429eaf55: select course_.course_id, course_.CERT_TYPE as cert_typ2_1_, course_.DESCRIPTION as descript3_1_, course_.END_DATE as end_date4_1_, course_.START_DATE as start_da5_1_ from COURSES course_ where course_.course_id=0]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Inserting entity: model.Student (native id)
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@629e8212 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@4ed35861: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME) values (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)]]
[TRACE] Dehydrating entity: [model.Student#<null>]
[DEBUG] Natively generated identity: 2
[TRACE] Releasing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@4e424582 [wrapping: com.mysql.jdbc.JDBC4ResultSet@498c535d]]
[TRACE] Closing result set [com.mchange.v2.c3p0.impl.NewProxyResultSet@4e424582 [wrapping: com.mysql.jdbc.JDBC4ResultSet@498c535d]]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@629e8212 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@4ed35861: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME) values (null, 1, 'Brijesh', 'Varsani')]]
[DEBUG] HHH000387: ResultSet's statement was not registered
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@629e8212 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@4ed35861: insert into PERSONS (SSN, ADDRESS_ID, FIRST_NAME, SECOND_NAME) values (null, 1, 'Brijesh', 'Varsani')]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Inserting entity: [model.Student#2]
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@113ee1ce [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@39b839d9: insert into STUDENTS (COURSE_ID, INSTRUCTOR_ID, MEDICAL_TESTS, STUDENT_ID) values (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)]]
[TRACE] Dehydrating entity: [model.Student#2]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@113ee1ce [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@39b839d9: insert into STUDENTS (COURSE_ID, INSTRUCTOR_ID, MEDICAL_TESTS, STUDENT_ID) values (null, 1, null, 2)]]
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@113ee1ce [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@39b839d9: insert into STUDENTS (COURSE_ID, INSTRUCTOR_ID, MEDICAL_TESTS, STUDENT_ID) values (null, 1, null, 2)]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Unresolved inserts before resolving [[model.Student#2]]: [UnresolvedEntityInsertActions[[insert=EntityInsertAction[model.Flight#0] dependencies=[NonNullableTransientDependencies[transientEntityName=model.Student requiredBy=[student]]]]]
[TRACE] Resolving insert [[model.Flight#0]] dependency on [[model.Student#2]]
[TRACE] Resolving insert [EntityInsertAction[model.Flight#0]] (only depended on [[model.Student#2]])
[TRACE] Unresolved inserts after resolving [[model.Student#2]]: [UnresolvedEntityInsertActions[]]
[TRACE] Adding resolved non-early insert action.
[TRACE] No unresolved entity inserts that depended on [[model.Flight#0]]
[TRACE] Processing cascade ACTION_SAVE_UPDATE for: model.Student
[TRACE] Done processing cascade ACTION_SAVE_UPDATE for: model.Student
[TRACE] Done cascade ACTION_SAVE_UPDATE for collection: model.FlightInstructor.students
[TRACE] Done processing cascade ACTION_SAVE_UPDATE for: model.FlightInstructor
[TRACE] No entity insert actions have non-nullable, transient entity dependencies.
[TRACE] Saving transient instance
[DEBUG] Generated identifier: 0, using strategy: org.hibernate.id.Assigned
[TRACE] Saving [model.Course#0]
[TRACE] Processing cascade ACTION_SAVE_UPDATE for: model.Course
[TRACE] Done processing cascade ACTION_SAVE_UPDATE for: model.Course
[TRACE] Wrapped collection in role: model.Course.students
[TRACE] Adding an EntityInsertAction for [model.Course] object
[TRACE] Adding insert with no non-nullable, transient entities: [EntityInsertAction[model.Course#0]]
[TRACE] Adding resolved non-early insert action.
[TRACE] No unresolved entity inserts that depended on [[model.Course#0]]
[TRACE] Processing cascade ACTION_SAVE_UPDATE for: model.Course
[TRACE] Cascade ACTION_SAVE_UPDATE for collection: model.Course.students
[TRACE] Cascading to save or update: model.Student
[TRACE] Persistent instance of: model.Student
[TRACE] Ignoring persistent instance
[TRACE] Object already associated with session: [model.Student#2]
[TRACE] Done cascade ACTION_SAVE_UPDATE for collection: model.Course.students
[TRACE] Deleting orphans for collection: model.Course.students
[TRACE] Done deleting orphans for collection: model.Course.students
[TRACE] Done processing cascade ACTION_SAVE_UPDATE for: model.Course
[TRACE] No entity insert actions have non-nullable, transient entity dependencies.
[DEBUG] committing
[TRACE] ResourceLocalTransactionCoordinatorImpl#beforeCompletionCallback
[TRACE] SessionImpl#beforeTransactionCompletion()
[TRACE] Automatically flushing session
[TRACE] Flushing session
[DEBUG] Processing flush-time cascades
[TRACE] Processing cascade ACTION_SAVE_UPDATE for: model.FlightInstructor
[TRACE] Cascade ACTION_SAVE_UPDATE for collection: model.FlightInstructor.flights
[TRACE] Cascading to save or update: model.Flight
[TRACE] Persistent instance of: model.Flight
[TRACE] Ignoring persistent instance
[TRACE] Object already associated with session: [model.Flight#0]
[TRACE] Done cascade ACTION_SAVE_UPDATE for collection: model.FlightInstructor.flights
[TRACE] Cascade ACTION_SAVE_UPDATE for collection: model.FlightInstructor.students
[TRACE] Cascading to save or update: model.Student
[TRACE] Persistent instance of: model.Student
[TRACE] Ignoring persistent instance
[TRACE] Object already associated with session: [model.Student#2]
[TRACE] Done cascade ACTION_SAVE_UPDATE for collection: model.FlightInstructor.students
[TRACE] Done processing cascade ACTION_SAVE_UPDATE for: model.FlightInstructor
[TRACE] Processing cascade ACTION_SAVE_UPDATE for: model.Student
[TRACE] Cascading to save or update: model.Address
[TRACE] Persistent instance of: model.Address
[TRACE] Ignoring persistent instance
[TRACE] Object already associated with session: [model.Address#1]
[TRACE] Done processing cascade ACTION_SAVE_UPDATE for: model.Student
[TRACE] Processing cascade ACTION_SAVE_UPDATE for: model.Course
[TRACE] Cascade ACTION_SAVE_UPDATE for collection: model.Course.students
[TRACE] Cascading to save or update: model.Student
[TRACE] Persistent instance of: model.Student
[TRACE] Ignoring persistent instance
[TRACE] Object already associated with session: [model.Student#2]
[TRACE] Done cascade ACTION_SAVE_UPDATE for collection: model.Course.students
[TRACE] Deleting orphans for collection: model.Course.students
[TRACE] Done deleting orphans for collection: model.Course.students
[TRACE] Done processing cascade ACTION_SAVE_UPDATE for: model.Course
[DEBUG] Dirty checking collections
[TRACE] Flushing entities and processing referenced collections
[DEBUG] Collection found: [model.FlightInstructor.flights#1], was: [<unreferenced>] (initialized)
[DEBUG] Collection found: [model.FlightInstructor.students#1], was: [<unreferenced>] (initialized)
[TRACE] model.Student.course is dirty
[TRACE] Found dirty properties [[model.Student#2]] : [course]
[TRACE] Updating entity: [model.Student#2]
[DEBUG] Collection found: [model.Address.persons#1], was: [<unreferenced>] (initialized)
[DEBUG] Collection found: [model.Course.students#0], was: [<unreferenced>] (initialized)
[TRACE] Processing unreferenced collections
[TRACE] Scheduling collection removes/(re)creates/updates
[DEBUG] Flushed: 2 insertions, 1 updates, 0 deletions to 5 objects
[DEBUG] Flushed: 4 (re)creations, 0 updates, 0 removals to 4 collections
[DEBUG] Listing entities:
[DEBUG] model.Flight{date=2020-11-11, instructor=model.FlightInstructor#1, student=model.Student#2, description=null, id=0}
[DEBUG] model.Student{firstName=Brijesh, address=model.Address#1, instructor=model.FlightInstructor#1, course=model.Course#0, id=2, medicalTests=null, flights=null, SSN=null, secondName=Varsani, theoryClasses=null}
[DEBUG] model.FlightInstructor{valid=true, firstName=Ismoil, address=null, students=[model.Student#2], id=1, licenceNo=54313, flights=[model.Flight#0], SSN=null, secondName=Atajanov}
[DEBUG] model.Course{certType=AIRLINE_TRANSPORT_PILOT, endDate=null, description=null, students=[model.Student#2], id=0, startDate=null}
[DEBUG] model.Address{country=POLAND, persons=[model.Person#2], city=null, street=null, postalCode=null, id=1}
[TRACE] Executing flush
[TRACE] Inserting entity: [model.Flight#0]
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@3ca14cf4 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@755f0aa1: insert into flights (DATE, DESCRIPTION, INSTRUCTOR_ID, STUDENT_ID, flight_id) values (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)]]
[TRACE] Dehydrating entity: [model.Flight#0]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@3ca14cf4 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@755f0aa1: insert into flights (DATE, DESCRIPTION, INSTRUCTOR_ID, STUDENT_ID, flight_id) values ('2020-11-11', null, 1, 2, 0)]]
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@3ca14cf4 [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@755f0aa1: insert into flights (DATE, DESCRIPTION, INSTRUCTOR_ID, STUDENT_ID, flight_id) values ('2020-11-11', null, 1, 2, 0)]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Inserting entity: [model.Course#0]
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@37c5284a [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@77c88c76: insert into COURSES (CERT_TYPE, DESCRIPTION, END_DATE, START_DATE, course_id) values (** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **, ** NOT SPECIFIED **)]]
[TRACE] Dehydrating entity: [model.Course#0]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@37c5284a [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@77c88c76: insert into COURSES (CERT_TYPE, DESCRIPTION, END_DATE, START_DATE, course_id) values ('AIRLINE_TRANSPORT_PILOT', null, null, null, 0)]]
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@37c5284a [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@77c88c76: insert into COURSES (CERT_TYPE, DESCRIPTION, END_DATE, START_DATE, course_id) values ('AIRLINE_TRANSPORT_PILOT', null, null, null, 0)]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Updating entity: [model.Student#2]
[TRACE] Registering statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@eed890d [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@7ee1f27f: update STUDENTS set COURSE_ID=** NOT SPECIFIED **, INSTRUCTOR_ID=** NOT SPECIFIED **, MEDICAL_TESTS=** NOT SPECIFIED ** where STUDENT_ID=** NOT SPECIFIED **]]
[TRACE] Dehydrating entity: [model.Student#2]
[TRACE] Releasing statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@eed890d [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@7ee1f27f: update STUDENTS set COURSE_ID=0, INSTRUCTOR_ID=1, MEDICAL_TESTS=null where STUDENT_ID=2]]
[TRACE] Closing prepared statement [com.mchange.v2.c3p0.impl.NewProxyPreparedStatement@eed890d [wrapping: com.mysql.jdbc.JDBC4PreparedStatement@7ee1f27f: update STUDENTS set COURSE_ID=0, INSTRUCTOR_ID=1, MEDICAL_TESTS=null where STUDENT_ID=2]]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Starting after statement execution processing [AFTER_TRANSACTION]
[TRACE] Post flush
[TRACE] LogicalConnection#beforeTransactionCompletion
[TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsBeforeTransactionCompletion
[TRACE] Preparing to commit transaction via JDBC Connection.commit()
[TRACE] Transaction committed via JDBC Connection.commit()
[TRACE] LogicalConnection#afterTransaction
[TRACE] Releasing JDBC resources
[DEBUG] Initiating JDBC connection release from afterTransaction
[TRACE] Releasing JDBC resources
[TRACE] ResourceLocalTransactionCoordinatorImpl#afterCompletionCallback(true)
[TRACE] SynchronizationRegistryStandardImpl.notifySynchronizationsAfterTransactionCompletion(3)
[TRACE] LogicalConnection#afterTransaction
[TRACE] Releasing JDBC resources
[DEBUG] Initiating JDBC connection release from afterTransaction
[TRACE] SessionImpl#afterTransactionCompletion(successful=true, delayed=false)
[TRACE] Closing session [755d991f-8292-4526-9d09-596f0779ae41]
[TRACE] Closing JDBC container [org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl@38588dea]
[TRACE] Releasing JDBC resources
[TRACE] Closing logical connection
[TRACE] Logical connection closed
